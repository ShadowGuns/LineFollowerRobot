
LineFollowingCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000475c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004894  08004894  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004894  08004894  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004894  08004894  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004894  08004894  00014894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800489c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000078  08004914  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004914  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afc1  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a6f  00000000  00000000  0002b062  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  0002cad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  0002d710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017ae2  00000000  00000000  0002e260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009cc1  00000000  00000000  00045d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a1c9  00000000  00000000  0004fa03  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f8  00000000  00000000  000d9c48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004850 	.word	0x08004850

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004850 	.word	0x08004850

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a44:	f1a2 0201 	sub.w	r2, r2, #1
 8000a48:	d1ed      	bne.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_f2uiz>:
 8000f30:	0042      	lsls	r2, r0, #1
 8000f32:	d20e      	bcs.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f38:	d30b      	bcc.n	8000f52 <__aeabi_f2uiz+0x22>
 8000f3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f42:	d409      	bmi.n	8000f58 <__aeabi_f2uiz+0x28>
 8000f44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f50:	4770      	bx	lr
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	4770      	bx	lr
 8000f58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_f2uiz+0x32>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d102      	bne.n	8000f68 <__aeabi_f2uiz+0x38>
 8000f62:	f04f 30ff 	mov.w	r0, #4294967295
 8000f66:	4770      	bx	lr
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <PID_PROCESS>:
	pid_parameters->Kp = Kp;
	pid_parameters->Ki = Ki;
	pid_parameters->Kd = Kd;
}
float PID_PROCESS(PID_parameter* pid_parameter, float vitri,float setpoint)   //setpoint = 0;
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
		pid_parameter->error =  vitri - setpoint;
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	68b8      	ldr	r0, [r7, #8]
 8000f80:	f7ff fd06 	bl	8000990 <__aeabi_fsub>
 8000f84:	4603      	mov	r3, r0
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	60da      	str	r2, [r3, #12]
    pid_parameter->pre2_error = pid_parameter->pre_error;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	615a      	str	r2, [r3, #20]
    pid_parameter->pre_error = pid_parameter->error;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

    pid_parameter->pre_Out = pid_parameter->Out;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c

    pid_parameter->KP_part = pid_parameter->Kp * (pid_parameter->error - pid_parameter->pre_error);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681c      	ldr	r4, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	f7ff fcec 	bl	8000990 <__aeabi_fsub>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f7ff fdf1 	bl	8000ba4 <__aeabi_fmul>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	61da      	str	r2, [r3, #28]
    pid_parameter->KI_part = 0.5* pid_parameter->Ki * pid_parameter->Ts * (pid_parameter->error + pid_parameter->pre_error);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fa20 	bl	8000414 <__aeabi_f2d>
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	4b4e      	ldr	r3, [pc, #312]	; (8001114 <PID_PROCESS+0x1a4>)
 8000fda:	f7ff fa73 	bl	80004c4 <__aeabi_dmul>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460c      	mov	r4, r1
 8000fe2:	4625      	mov	r5, r4
 8000fe4:	461c      	mov	r4, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fa12 	bl	8000414 <__aeabi_f2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	f7ff fa64 	bl	80004c4 <__aeabi_dmul>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	460c      	mov	r4, r1
 8001000:	4625      	mov	r5, r4
 8001002:	461c      	mov	r4, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	4619      	mov	r1, r3
 800100e:	4610      	mov	r0, r2
 8001010:	f7ff fcc0 	bl	8000994 <__addsf3>
 8001014:	4603      	mov	r3, r0
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff f9fc 	bl	8000414 <__aeabi_f2d>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4620      	mov	r0, r4
 8001022:	4629      	mov	r1, r5
 8001024:	f7ff fa4e 	bl	80004c4 <__aeabi_dmul>
 8001028:	4603      	mov	r3, r0
 800102a:	460c      	mov	r4, r1
 800102c:	4618      	mov	r0, r3
 800102e:	4621      	mov	r1, r4
 8001030:	f7ff fc5a 	bl	80008e8 <__aeabi_d2f>
 8001034:	4602      	mov	r2, r0
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	621a      	str	r2, [r3, #32]
    pid_parameter->KD_part =(pid_parameter->Kd / pid_parameter->Ts) * (pid_parameter->error - 2*pid_parameter->pre_error +pid_parameter->pre2_error);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	4619      	mov	r1, r3
 8001044:	4610      	mov	r0, r2
 8001046:	f7ff fe61 	bl	8000d0c <__aeabi_fdiv>
 800104a:	4603      	mov	r3, r0
 800104c:	461d      	mov	r5, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68dc      	ldr	r4, [r3, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	4619      	mov	r1, r3
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fc9b 	bl	8000994 <__addsf3>
 800105e:	4603      	mov	r3, r0
 8001060:	4619      	mov	r1, r3
 8001062:	4620      	mov	r0, r4
 8001064:	f7ff fc94 	bl	8000990 <__aeabi_fsub>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	4619      	mov	r1, r3
 8001072:	4610      	mov	r0, r2
 8001074:	f7ff fc8e 	bl	8000994 <__addsf3>
 8001078:	4603      	mov	r3, r0
 800107a:	4619      	mov	r1, r3
 800107c:	4628      	mov	r0, r5
 800107e:	f7ff fd91 	bl	8000ba4 <__aeabi_fmul>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	625a      	str	r2, [r3, #36]	; 0x24

    pid_parameter->Out = pid_parameter->pre_Out+ pid_parameter->KP_part + pid_parameter->KI_part +pid_parameter->KD_part;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f7ff fc7d 	bl	8000994 <__addsf3>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6a1b      	ldr	r3, [r3, #32]
 80010a2:	4619      	mov	r1, r3
 80010a4:	4610      	mov	r0, r2
 80010a6:	f7ff fc75 	bl	8000994 <__addsf3>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4610      	mov	r0, r2
 80010b6:	f7ff fc6d 	bl	8000994 <__addsf3>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28

    if (pid_parameter->Out > pid_parameter->PID_Saturation)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4619      	mov	r1, r3
 80010cc:	4610      	mov	r0, r2
 80010ce:	f7ff ff25 	bl	8000f1c <__aeabi_fcmpgt>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <PID_PROCESS+0x172>
	  {
			pid_parameter->Out = pid_parameter->PID_Saturation;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
 80010e0:	e012      	b.n	8001108 <PID_PROCESS+0x198>
	   }
	  else if (pid_parameter->Out < (-pid_parameter->PID_Saturation))
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80010ee:	4619      	mov	r1, r3
 80010f0:	4610      	mov	r0, r2
 80010f2:	f7ff fef5 	bl	8000ee0 <__aeabi_fcmplt>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <PID_PROCESS+0x198>
	  {
			pid_parameter->Out = -pid_parameter->PID_Saturation;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
	  }

    return pid_parameter->Out;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bdb0      	pop	{r4, r5, r7, pc}
 8001114:	3fe00000 	.word	0x3fe00000

08001118 <backward>:
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET); // dong co phai
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
	}
void backward(void)
	{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2102      	movs	r1, #2
 8001120:	480a      	ldr	r0, [pc, #40]	; (800114c <backward+0x34>)
 8001122:	f001 fbb2 	bl	800288a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2101      	movs	r1, #1
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <backward+0x34>)
 800112c:	f001 fbad 	bl	800288a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <backward+0x34>)
 8001138:	f001 fba7 	bl	800288a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001142:	4802      	ldr	r0, [pc, #8]	; (800114c <backward+0x34>)
 8001144:	f001 fba1 	bl	800288a <HAL_GPIO_WritePin>
	}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40010c00 	.word	0x40010c00

08001150 <HAL_TIM_PeriodElapsedCallback>:
 PB1  ---> IN3
 PB10 ---> IN2
 PB11 ---> IN1
 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)   // ngat 5ms
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim3.Instance)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b43      	ldr	r3, [pc, #268]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d17e      	bne.n	8001262 <HAL_TIM_PeriodElapsedCallback+0x112>
    {
        if (mode_current == LINE_FOLLOW)
 8001164:	4b42      	ldr	r3, [pc, #264]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d16e      	bne.n	800124a <HAL_TIM_PeriodElapsedCallback+0xfa>
        {
            S[3] = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5); // dat gia tri = 7 // ngoai cung ben trai
 800116c:	2120      	movs	r1, #32
 800116e:	4841      	ldr	r0, [pc, #260]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001170:	f001 fb74 	bl	800285c <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800117a:	70da      	strb	r2, [r3, #3]
            S[2] = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4); // dat gia tri = 5 // o giua ben trai
 800117c:	2110      	movs	r1, #16
 800117e:	483d      	ldr	r0, [pc, #244]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001180:	f001 fb6c 	bl	800285c <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800118a:	709a      	strb	r2, [r3, #2]
            S[1] = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3); // dat gia tri = 3 // o giua ben phai
 800118c:	2108      	movs	r1, #8
 800118e:	4839      	ldr	r0, [pc, #228]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001190:	f001 fb64 	bl	800285c <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800119a:	705a      	strb	r2, [r3, #1]
            S[0] = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_15); // dat gia tri = 1 // ngoai cung ben phai
 800119c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a0:	4836      	ldr	r0, [pc, #216]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80011a2:	f001 fb5b 	bl	800285c <HAL_GPIO_ReadPin>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80011ac:	701a      	strb	r2, [r3, #0]

            /*If Sensor detects line, add to sum Index*/
            for (int i = 0; i <= 3; i++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	e010      	b.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0x86>
            {
                if (S[i] == 0)
 80011b4:	4a30      	ldr	r2, [pc, #192]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4413      	add	r3, r2
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d107      	bne.n	80011d0 <HAL_TIM_PeriodElapsedCallback+0x80>
                {
                    i_SumIndexArry += (2 * i + 1);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a2c      	ldr	r2, [pc, #176]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80011ce:	6013      	str	r3, [r2, #0]
            for (int i = 0; i <= 3; i++)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3301      	adds	r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	ddeb      	ble.n	80011b4 <HAL_TIM_PeriodElapsedCallback+0x64>
                }
            }

            if (i_SumIndexArry == 0)
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d103      	bne.n	80011ec <HAL_TIM_PeriodElapsedCallback+0x9c>
            {
                Line_ON = false; // khong bat line
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e002      	b.n	80011f2 <HAL_TIM_PeriodElapsedCallback+0xa2>
            }
            else
            {
                Line_ON = true; // bat duoc line
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
            }

            if (Line_ON)
 80011f2:	4b24      	ldr	r3, [pc, #144]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <HAL_TIM_PeriodElapsedCallback+0xb6>
            {
                Control_Value_Line (i_SumIndexArry);
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f8cc 	bl	800139c <Control_Value_Line>
 8001204:	e019      	b.n	800123a <HAL_TIM_PeriodElapsedCallback+0xea>
            }
            else
            {
                demoutline += 1;
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800120e:	6013      	str	r3, [r2, #0]
                if (demoutline == 10) // out time line -> nhan lai tri tri truoc khi out
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b0a      	cmp	r3, #10
 8001216:	d110      	bne.n	800123a <HAL_TIM_PeriodElapsedCallback+0xea>
                {

                    vitri_st = previtri_st;
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800121a:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800121c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001220:	e883 0003 	stmia.w	r3, {r0, r1}
                    Control_vitri_Line (vitri_st);
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001226:	e893 0003 	ldmia.w	r3, {r0, r1}
 800122a:	f000 f933 	bl	8001494 <Control_vitri_Line>
                    Line_ON = true;
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
                    demoutline = 0;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
                }
            }

            presumindex = i_SumIndexArry;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001240:	6013      	str	r3, [r2, #0]
            i_SumIndexArry = 0;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
        {
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
        }
    }
}
 8001248:	e00b      	b.n	8001262 <HAL_TIM_PeriodElapsedCallback+0x112>
        else if (mode_current == STOP)
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d107      	bne.n	8001262 <HAL_TIM_PeriodElapsedCallback+0x112>
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	63da      	str	r2, [r3, #60]	; 0x3c
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000104 	.word	0x20000104
 8001270:	20000000 	.word	0x20000000
 8001274:	40010c00 	.word	0x40010c00
 8001278:	20000100 	.word	0x20000100
 800127c:	40010800 	.word	0x40010800
 8001280:	200000a0 	.word	0x200000a0
 8001284:	20000001 	.word	0x20000001
 8001288:	200000a4 	.word	0x200000a4
 800128c:	20000094 	.word	0x20000094
 8001290:	200000a8 	.word	0x200000a8
 8001294:	2000009c 	.word	0x2000009c
 8001298:	200000b8 	.word	0x200000b8

0800129c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart1.Instance)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b38      	ldr	r3, [pc, #224]	; (800138c <HAL_UART_RxCpltCallback+0xf0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d169      	bne.n	8001384 <HAL_UART_RxCpltCallback+0xe8>
    {
        switch (my_state)
 80012b0:	4b37      	ldr	r3, [pc, #220]	; (8001390 <HAL_UART_RxCpltCallback+0xf4>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <HAL_UART_RxCpltCallback+0x22>
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d01a      	beq.n	80012f2 <HAL_UART_RxCpltCallback+0x56>
                    }
                    break;
                }
        }
    }
}
 80012bc:	e062      	b.n	8001384 <HAL_UART_RxCpltCallback+0xe8>
                    if (Rx_buff[0] == 's')  // khi nhan nut start de bat dau
 80012be:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b73      	cmp	r3, #115	; 0x73
 80012c4:	d108      	bne.n	80012d8 <HAL_UART_RxCpltCallback+0x3c>
                        my_state = UART_APP;
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <HAL_UART_RxCpltCallback+0xf4>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
                        HAL_UART_Receive_DMA (&huart1, Rx_buff, 1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	4931      	ldr	r1, [pc, #196]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 80012d0:	482e      	ldr	r0, [pc, #184]	; (800138c <HAL_UART_RxCpltCallback+0xf0>)
 80012d2:	f002 feaf 	bl	8004034 <HAL_UART_Receive_DMA>
                        break;
 80012d6:	e055      	b.n	8001384 <HAL_UART_RxCpltCallback+0xe8>
                    else if (Rx_buff[0] == '1')  // khi nhan nut stop
 80012d8:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b31      	cmp	r3, #49	; 0x31
 80012de:	d108      	bne.n	80012f2 <HAL_UART_RxCpltCallback+0x56>
                        my_state = UART_START;
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_UART_RxCpltCallback+0xf4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
                        HAL_UART_Receive_DMA (&huart1, Rx_buff, 1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	492a      	ldr	r1, [pc, #168]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 80012ea:	4828      	ldr	r0, [pc, #160]	; (800138c <HAL_UART_RxCpltCallback+0xf0>)
 80012ec:	f002 fea2 	bl	8004034 <HAL_UART_Receive_DMA>
                        break;
 80012f0:	e048      	b.n	8001384 <HAL_UART_RxCpltCallback+0xe8>
                    HAL_UART_Receive_DMA (&huart1, (uint8_t*) Rx_buff, 1);
 80012f2:	2201      	movs	r2, #1
 80012f4:	4927      	ldr	r1, [pc, #156]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 80012f6:	4825      	ldr	r0, [pc, #148]	; (800138c <HAL_UART_RxCpltCallback+0xf0>)
 80012f8:	f002 fe9c 	bl	8004034 <HAL_UART_Receive_DMA>
                    if (Rx_buff[0] == 'f' || Rx_buff[0] == 'b'
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b66      	cmp	r3, #102	; 0x66
 8001302:	d00b      	beq.n	800131c <HAL_UART_RxCpltCallback+0x80>
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b62      	cmp	r3, #98	; 0x62
 800130a:	d007      	beq.n	800131c <HAL_UART_RxCpltCallback+0x80>
                            || Rx_buff[0] == 'r' || Rx_buff[0] == 'l') // khi o che do dieu khien tay
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b72      	cmp	r3, #114	; 0x72
 8001312:	d003      	beq.n	800131c <HAL_UART_RxCpltCallback+0x80>
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b6c      	cmp	r3, #108	; 0x6c
 800131a:	d10b      	bne.n	8001334 <HAL_UART_RxCpltCallback+0x98>
                        mode_current = MANUAL;  // control
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <HAL_UART_RxCpltCallback+0xfc>)
 800131e:	2202      	movs	r2, #2
 8001320:	701a      	strb	r2, [r3, #0]
                        my_state = UART_APP;
 8001322:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <HAL_UART_RxCpltCallback+0xf4>)
 8001324:	2201      	movs	r2, #1
 8001326:	701a      	strb	r2, [r3, #0]
                        HAL_UART_Receive_DMA (&huart1, Rx_buff, 1);
 8001328:	2201      	movs	r2, #1
 800132a:	491a      	ldr	r1, [pc, #104]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 800132c:	4817      	ldr	r0, [pc, #92]	; (800138c <HAL_UART_RxCpltCallback+0xf0>)
 800132e:	f002 fe81 	bl	8004034 <HAL_UART_Receive_DMA>
                    break;
 8001332:	e026      	b.n	8001382 <HAL_UART_RxCpltCallback+0xe6>
                    else if (Rx_buff[0] == 'i')
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b69      	cmp	r3, #105	; 0x69
 800133a:	d103      	bne.n	8001344 <HAL_UART_RxCpltCallback+0xa8>
                        mode_current = STOP;
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_UART_RxCpltCallback+0xfc>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
                    break;
 8001342:	e01e      	b.n	8001382 <HAL_UART_RxCpltCallback+0xe6>
                    else if (Rx_buff[0] == 'd') // bat che do do line
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d10b      	bne.n	8001364 <HAL_UART_RxCpltCallback+0xc8>
                        mode_current = LINE_FOLLOW;  // che do do line
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_UART_RxCpltCallback+0xfc>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
                        HAL_UART_Receive_DMA (&huart1, Rx_buff, 1);
 8001352:	2201      	movs	r2, #1
 8001354:	490f      	ldr	r1, [pc, #60]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <HAL_UART_RxCpltCallback+0xf0>)
 8001358:	f002 fe6c 	bl	8004034 <HAL_UART_Receive_DMA>
                        my_state = UART_APP;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_UART_RxCpltCallback+0xf4>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
                    break;
 8001362:	e00e      	b.n	8001382 <HAL_UART_RxCpltCallback+0xe6>
                    else if (Rx_buff[0] == 'k') // tat che do do line
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b6b      	cmp	r3, #107	; 0x6b
 800136a:	d10a      	bne.n	8001382 <HAL_UART_RxCpltCallback+0xe6>
                        mode_current = STOP;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_UART_RxCpltCallback+0xfc>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
                        HAL_UART_Receive_DMA (&huart1, Rx_buff, 1);
 8001372:	2201      	movs	r2, #1
 8001374:	4907      	ldr	r1, [pc, #28]	; (8001394 <HAL_UART_RxCpltCallback+0xf8>)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_UART_RxCpltCallback+0xf0>)
 8001378:	f002 fe5c 	bl	8004034 <HAL_UART_Receive_DMA>
                        my_state = UART_APP;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <HAL_UART_RxCpltCallback+0xf4>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
                    break;
 8001382:	bf00      	nop
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200001d4 	.word	0x200001d4
 8001390:	200000b0 	.word	0x200000b0
 8001394:	20000214 	.word	0x20000214
 8001398:	20000000 	.word	0x20000000

0800139c <Control_Value_Line>:
 @param
 light :         0    1    2    3
 Reference:      1    3    5    7
 */
void Control_Value_Line (int value)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    switch (value)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b0f      	cmp	r3, #15
 80013a8:	d85c      	bhi.n	8001464 <Control_Value_Line+0xc8>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <Control_Value_Line+0x14>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	08001439 	.word	0x08001439
 80013b4:	08001457 	.word	0x08001457
 80013b8:	08001465 	.word	0x08001465
 80013bc:	0800141b 	.word	0x0800141b
 80013c0:	08001465 	.word	0x08001465
 80013c4:	0800140d 	.word	0x0800140d
 80013c8:	08001465 	.word	0x08001465
 80013cc:	080013f1 	.word	0x080013f1
 80013d0:	08001429 	.word	0x08001429
 80013d4:	08001465 	.word	0x08001465
 80013d8:	08001465 	.word	0x08001465
 80013dc:	08001465 	.word	0x08001465
 80013e0:	08001465 	.word	0x08001465
 80013e4:	08001449 	.word	0x08001449
 80013e8:	08001465 	.word	0x08001465
 80013ec:	080013ff 	.word	0x080013ff
    {
        case 7:
            vitri_st.vitri = 1.8;
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <Control_Value_Line+0xdc>)
 80013f2:	4a22      	ldr	r2, [pc, #136]	; (800147c <Control_Value_Line+0xe0>)
 80013f4:	601a      	str	r2, [r3, #0]
            vitri_st.goback = false;
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <Control_Value_Line+0xdc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	711a      	strb	r2, [r3, #4]
            break;
 80013fc:	e033      	b.n	8001466 <Control_Value_Line+0xca>
        case (12 | 15):
            vitri_st.vitri = 1.65;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <Control_Value_Line+0xdc>)
 8001400:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <Control_Value_Line+0xe4>)
 8001402:	601a      	str	r2, [r3, #0]
            vitri_st.goback = false;
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <Control_Value_Line+0xdc>)
 8001406:	2200      	movs	r2, #0
 8001408:	711a      	strb	r2, [r3, #4]
            break;
 800140a:	e02c      	b.n	8001466 <Control_Value_Line+0xca>
        case 5:
            vitri_st.vitri = 1.4;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <Control_Value_Line+0xdc>)
 800140e:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <Control_Value_Line+0xe8>)
 8001410:	601a      	str	r2, [r3, #0]
            vitri_st.goback = false;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <Control_Value_Line+0xdc>)
 8001414:	2200      	movs	r2, #0
 8001416:	711a      	strb	r2, [r3, #4]
            break;
 8001418:	e025      	b.n	8001466 <Control_Value_Line+0xca>
        case 3:
            vitri_st.vitri = -1.4;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <Control_Value_Line+0xdc>)
 800141c:	4a1a      	ldr	r2, [pc, #104]	; (8001488 <Control_Value_Line+0xec>)
 800141e:	601a      	str	r2, [r3, #0]
            vitri_st.goback = false;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <Control_Value_Line+0xdc>)
 8001422:	2200      	movs	r2, #0
 8001424:	711a      	strb	r2, [r3, #4]
            break;
 8001426:	e01e      	b.n	8001466 <Control_Value_Line+0xca>
        case 8:
            vitri_st.vitri = 0;
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <Control_Value_Line+0xdc>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
            vitri_st.goback = false;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <Control_Value_Line+0xdc>)
 8001432:	2200      	movs	r2, #0
 8001434:	711a      	strb	r2, [r3, #4]
            break;
 8001436:	e016      	b.n	8001466 <Control_Value_Line+0xca>
        case 0:
            vitri_st.vitri = 0;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <Control_Value_Line+0xdc>)
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
            vitri_st.goback = true;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <Control_Value_Line+0xdc>)
 8001442:	2201      	movs	r2, #1
 8001444:	711a      	strb	r2, [r3, #4]
            break;
 8001446:	e00e      	b.n	8001466 <Control_Value_Line+0xca>
        case (4 | 9):
            vitri_st.vitri = -1.65;
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <Control_Value_Line+0xdc>)
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <Control_Value_Line+0xf0>)
 800144c:	601a      	str	r2, [r3, #0]
            vitri_st.goback = false;
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <Control_Value_Line+0xdc>)
 8001450:	2200      	movs	r2, #0
 8001452:	711a      	strb	r2, [r3, #4]
            break;
 8001454:	e007      	b.n	8001466 <Control_Value_Line+0xca>
        case 1:
            vitri_st.vitri = -1.8;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <Control_Value_Line+0xdc>)
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <Control_Value_Line+0xf4>)
 800145a:	601a      	str	r2, [r3, #0]
            vitri_st.goback = false;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <Control_Value_Line+0xdc>)
 800145e:	2200      	movs	r2, #0
 8001460:	711a      	strb	r2, [r3, #4]
            break;
 8001462:	e000      	b.n	8001466 <Control_Value_Line+0xca>
        default:
            break;
 8001464:	bf00      	nop
    }
    Control_vitri_Line (vitri_st);
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <Control_Value_Line+0xdc>)
 8001468:	e893 0003 	ldmia.w	r3, {r0, r1}
 800146c:	f000 f812 	bl	8001494 <Control_vitri_Line>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000094 	.word	0x20000094
 800147c:	3fe66666 	.word	0x3fe66666
 8001480:	3fd33333 	.word	0x3fd33333
 8001484:	3fb33333 	.word	0x3fb33333
 8001488:	bfb33333 	.word	0xbfb33333
 800148c:	bfd33333 	.word	0xbfd33333
 8001490:	bfe66666 	.word	0xbfe66666

08001494 <Control_vitri_Line>:

void Control_vitri_Line (struct ControlPosition vitri_st)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	463b      	mov	r3, r7
 800149c:	e883 0003 	stmia.w	r3, {r0, r1}
    previtri_st = vitri_st;
 80014a0:	4b70      	ldr	r3, [pc, #448]	; (8001664 <Control_vitri_Line+0x1d0>)
 80014a2:	461a      	mov	r2, r3
 80014a4:	463b      	mov	r3, r7
 80014a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014aa:	e882 0003 	stmia.w	r2, {r0, r1}
    //result_PWM = PID_PROCESS (&PID_set_parameters, vitri, 0);
    if ((vitri_st.vitri == 0) && (vitri_st.goback == false))
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	f04f 0100 	mov.w	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fd09 	bl	8000ecc <__aeabi_fcmpeq>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d010      	beq.n	80014e2 <Control_vitri_Line+0x4e>
 80014c0:	793b      	ldrb	r3, [r7, #4]
 80014c2:	f083 0301 	eor.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00a      	beq.n	80014e2 <Control_vitri_Line+0x4e>
    {
        backward ();
 80014cc:	f7ff fe24 	bl	8001118 <backward>
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 190); //kenh 3 dong co trai
 80014d0:	4b65      	ldr	r3, [pc, #404]	; (8001668 <Control_vitri_Line+0x1d4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	22be      	movs	r2, #190	; 0xbe
 80014d6:	63da      	str	r2, [r3, #60]	; 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 190); //kenh 4 dong co phai
 80014d8:	4b63      	ldr	r3, [pc, #396]	; (8001668 <Control_vitri_Line+0x1d4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	22be      	movs	r2, #190	; 0xbe
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
 80014e0:	e017      	b.n	8001512 <Control_vitri_Line+0x7e>
    }
    else if ((vitri_st.vitri == 0) && (vitri_st.goback == true))
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	f04f 0100 	mov.w	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fcef 	bl	8000ecc <__aeabi_fcmpeq>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00e      	beq.n	8001512 <Control_vitri_Line+0x7e>
 80014f4:	793b      	ldrb	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <Control_vitri_Line+0x7e>
    {
        backward ();
 80014fa:	f7ff fe0d 	bl	8001118 <backward>
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, -180); //kenh 3 dong co trai
 80014fe:	4b5a      	ldr	r3, [pc, #360]	; (8001668 <Control_vitri_Line+0x1d4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8001506:	63da      	str	r2, [r3, #60]	; 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, -180); //kenh 4 dong co pha
 8001508:	4b57      	ldr	r3, [pc, #348]	; (8001668 <Control_vitri_Line+0x1d4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f06f 02b3 	mvn.w	r2, #179	; 0xb3
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
    }
    if (vitri_st.vitri < 0)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f04f 0100 	mov.w	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fce1 	bl	8000ee0 <__aeabi_fcmplt>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d046      	beq.n	80015b2 <Control_vitri_Line+0x11e>
    {
        if (vitri_st.vitri < -1.5)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	4951      	ldr	r1, [pc, #324]	; (800166c <Control_vitri_Line+0x1d8>)
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fcd9 	bl	8000ee0 <__aeabi_fcmplt>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d025      	beq.n	8001580 <Control_vitri_Line+0xec>
        {
            backward ();
 8001534:	f7ff fdf0 	bl	8001118 <backward>
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 190); //kenh 3 dong co trai
 8001538:	4b4b      	ldr	r3, [pc, #300]	; (8001668 <Control_vitri_Line+0x1d4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	22be      	movs	r2, #190	; 0xbe
 800153e:	63da      	str	r2, [r3, #60]	; 0x3c
            HAL_GPIO_WritePin (GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // dong co phai
 8001540:	2201      	movs	r2, #1
 8001542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001546:	484a      	ldr	r0, [pc, #296]	; (8001670 <Control_vitri_Line+0x1dc>)
 8001548:	f001 f99f 	bl	800288a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin (GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001552:	4847      	ldr	r0, [pc, #284]	; (8001670 <Control_vitri_Line+0x1dc>)
 8001554:	f001 f999 	bl	800288a <HAL_GPIO_WritePin>
            result_PWM = PID_PROCESS (&PID_set_parameters_120, vitri_st.vitri, 0);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4619      	mov	r1, r3
 8001560:	4844      	ldr	r0, [pc, #272]	; (8001674 <Control_vitri_Line+0x1e0>)
 8001562:	f7ff fd05 	bl	8000f70 <PID_PROCESS>
 8001566:	4602      	mov	r2, r0
 8001568:	4b43      	ldr	r3, [pc, #268]	; (8001678 <Control_vitri_Line+0x1e4>)
 800156a:	601a      	str	r2, [r3, #0]
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, result_PWM);
 800156c:	4b42      	ldr	r3, [pc, #264]	; (8001678 <Control_vitri_Line+0x1e4>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <Control_vitri_Line+0x1d4>)
 8001572:	681c      	ldr	r4, [r3, #0]
 8001574:	4610      	mov	r0, r2
 8001576:	f7ff fcdb 	bl	8000f30 <__aeabi_f2uiz>
 800157a:	4603      	mov	r3, r0
 800157c:	6423      	str	r3, [r4, #64]	; 0x40
 800157e:	e018      	b.n	80015b2 <Control_vitri_Line+0x11e>
        }
        else
        {
            backward ();
 8001580:	f7ff fdca 	bl	8001118 <backward>
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 190); //kenh 3 dong co trai
 8001584:	4b38      	ldr	r3, [pc, #224]	; (8001668 <Control_vitri_Line+0x1d4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	22be      	movs	r2, #190	; 0xbe
 800158a:	63da      	str	r2, [r3, #60]	; 0x3c
            result_PWM = PID_PROCESS (&PID_set_parameters_160, vitri_st.vitri, 0);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	4839      	ldr	r0, [pc, #228]	; (800167c <Control_vitri_Line+0x1e8>)
 8001596:	f7ff fceb 	bl	8000f70 <PID_PROCESS>
 800159a:	4602      	mov	r2, r0
 800159c:	4b36      	ldr	r3, [pc, #216]	; (8001678 <Control_vitri_Line+0x1e4>)
 800159e:	601a      	str	r2, [r3, #0]
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, result_PWM);
 80015a0:	4b35      	ldr	r3, [pc, #212]	; (8001678 <Control_vitri_Line+0x1e4>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b30      	ldr	r3, [pc, #192]	; (8001668 <Control_vitri_Line+0x1d4>)
 80015a6:	681c      	ldr	r4, [r3, #0]
 80015a8:	4610      	mov	r0, r2
 80015aa:	f7ff fcc1 	bl	8000f30 <__aeabi_f2uiz>
 80015ae:	4603      	mov	r3, r0
 80015b0:	6423      	str	r3, [r4, #64]	; 0x40
        }
    }
    if (vitri_st.vitri > 0)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f04f 0100 	mov.w	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fcaf 	bl	8000f1c <__aeabi_fcmpgt>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d100      	bne.n	80015c6 <Control_vitri_Line+0x132>
            result_PWM = PID_PROCESS (&PID_set_parameters_160, vitri_st.vitri, 0);
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, result_PWM * (-1)); // kenh 3 dong co trai
        }
    }

}
 80015c4:	e049      	b.n	800165a <Control_vitri_Line+0x1c6>
        if (vitri_st.vitri > 1.5)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fca5 	bl	8000f1c <__aeabi_fcmpgt>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d025      	beq.n	8001624 <Control_vitri_Line+0x190>
            backward ();
 80015d8:	f7ff fd9e 	bl	8001118 <backward>
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 190); //kenh 4 dong co phai
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <Control_vitri_Line+0x1d4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	22be      	movs	r2, #190	; 0xbe
 80015e2:	641a      	str	r2, [r3, #64]	; 0x40
            HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // dong co trai
 80015e4:	2200      	movs	r2, #0
 80015e6:	2102      	movs	r1, #2
 80015e8:	4821      	ldr	r0, [pc, #132]	; (8001670 <Control_vitri_Line+0x1dc>)
 80015ea:	f001 f94e 	bl	800288a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80015ee:	2201      	movs	r2, #1
 80015f0:	2101      	movs	r1, #1
 80015f2:	481f      	ldr	r0, [pc, #124]	; (8001670 <Control_vitri_Line+0x1dc>)
 80015f4:	f001 f949 	bl	800288a <HAL_GPIO_WritePin>
            result_PWM = PID_PROCESS (&PID_set_parameters_120, vitri_st.vitri, 0);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4619      	mov	r1, r3
 8001600:	481c      	ldr	r0, [pc, #112]	; (8001674 <Control_vitri_Line+0x1e0>)
 8001602:	f7ff fcb5 	bl	8000f70 <PID_PROCESS>
 8001606:	4602      	mov	r2, r0
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <Control_vitri_Line+0x1e4>)
 800160a:	601a      	str	r2, [r3, #0]
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, result_PWM * (-1)); // kenh 3 dong co trai
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <Control_vitri_Line+0x1e4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <Control_vitri_Line+0x1d4>)
 8001616:	681c      	ldr	r4, [r3, #0]
 8001618:	4610      	mov	r0, r2
 800161a:	f7ff fc89 	bl	8000f30 <__aeabi_f2uiz>
 800161e:	4603      	mov	r3, r0
 8001620:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8001622:	e01a      	b.n	800165a <Control_vitri_Line+0x1c6>
            backward ();
 8001624:	f7ff fd78 	bl	8001118 <backward>
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 190); //kenh 4 dong co phai
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <Control_vitri_Line+0x1d4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	22be      	movs	r2, #190	; 0xbe
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
            result_PWM = PID_PROCESS (&PID_set_parameters_160, vitri_st.vitri, 0);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4619      	mov	r1, r3
 8001638:	4810      	ldr	r0, [pc, #64]	; (800167c <Control_vitri_Line+0x1e8>)
 800163a:	f7ff fc99 	bl	8000f70 <PID_PROCESS>
 800163e:	4602      	mov	r2, r0
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <Control_vitri_Line+0x1e4>)
 8001642:	601a      	str	r2, [r3, #0]
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, result_PWM * (-1)); // kenh 3 dong co trai
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <Control_vitri_Line+0x1e4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <Control_vitri_Line+0x1d4>)
 800164e:	681c      	ldr	r4, [r3, #0]
 8001650:	4610      	mov	r0, r2
 8001652:	f7ff fc6d 	bl	8000f30 <__aeabi_f2uiz>
 8001656:	4603      	mov	r3, r0
 8001658:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bd90      	pop	{r4, r7, pc}
 8001662:	bf00      	nop
 8001664:	200000a8 	.word	0x200000a8
 8001668:	200000b8 	.word	0x200000b8
 800166c:	bfc00000 	.word	0xbfc00000
 8001670:	40010c00 	.word	0x40010c00
 8001674:	20000038 	.word	0x20000038
 8001678:	200000b4 	.word	0x200000b4
 800167c:	20000004 	.word	0x20000004

08001680 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main (void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init ();
 8001684:	f000 fbbc 	bl	8001e00 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config ();
 8001688:	f000 f8a4 	bl	80017d4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init ();
 800168c:	f000 f986 	bl	800199c <MX_GPIO_Init>

    MX_TIM4_Init ();
 8001690:	f000 f820 	bl	80016d4 <MX_TIM4_Init>
    MX_TIM3_Init ();
 8001694:	f000 f8e4 	bl	8001860 <MX_TIM3_Init>
    MX_DMA_Init ();
 8001698:	f000 f95a 	bl	8001950 <MX_DMA_Init>
    MX_USART1_UART_Init ();
 800169c:	f000 f92e 	bl	80018fc <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start (&htim4, TIM_CHANNEL_3);
 80016a0:	2108      	movs	r1, #8
 80016a2:	4808      	ldr	r0, [pc, #32]	; (80016c4 <main+0x44>)
 80016a4:	f001 fe20 	bl	80032e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start (&htim4, TIM_CHANNEL_4);
 80016a8:	210c      	movs	r1, #12
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <main+0x44>)
 80016ac:	f001 fe1c 	bl	80032e8 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT (&htim3);
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <main+0x48>)
 80016b2:	f001 fd6f 	bl	8003194 <HAL_TIM_Base_Start_IT>
    HAL_UART_Receive_DMA (&huart1, Rx_buff, 1);
 80016b6:	2201      	movs	r2, #1
 80016b8:	4904      	ldr	r1, [pc, #16]	; (80016cc <main+0x4c>)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <main+0x50>)
 80016bc:	f002 fcba 	bl	8004034 <HAL_UART_Receive_DMA>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 80016c0:	e7fe      	b.n	80016c0 <main+0x40>
 80016c2:	bf00      	nop
 80016c4:	200000b8 	.word	0x200000b8
 80016c8:	20000104 	.word	0x20000104
 80016cc:	20000214 	.word	0x20000214
 80016d0:	200001d4 	.word	0x200001d4

080016d4 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init (void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08e      	sub	sp, #56	; 0x38
 80016d8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig =
 80016da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
        { 0 };
    TIM_MasterConfigTypeDef sMasterConfig =
 80016e8:	f107 0320 	add.w	r3, r7, #32
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
        { 0 };
    TIM_OC_InitTypeDef sConfigOC =
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	615a      	str	r2, [r3, #20]
 8001702:	619a      	str	r2, [r3, #24]
        { 0 };

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8001704:	4b31      	ldr	r3, [pc, #196]	; (80017cc <MX_TIM4_Init+0xf8>)
 8001706:	4a32      	ldr	r2, [pc, #200]	; (80017d0 <MX_TIM4_Init+0xfc>)
 8001708:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 9;
 800170a:	4b30      	ldr	r3, [pc, #192]	; (80017cc <MX_TIM4_Init+0xf8>)
 800170c:	2209      	movs	r2, #9
 800170e:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <MX_TIM4_Init+0xf8>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 254;
 8001716:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <MX_TIM4_Init+0xf8>)
 8001718:	22fe      	movs	r2, #254	; 0xfe
 800171a:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <MX_TIM4_Init+0xf8>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <MX_TIM4_Init+0xf8>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init (&htim4) != HAL_OK)
 8001728:	4828      	ldr	r0, [pc, #160]	; (80017cc <MX_TIM4_Init+0xf8>)
 800172a:	f001 fce3 	bl	80030f4 <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM4_Init+0x64>
    {
        Error_Handler ();
 8001734:	f000 f998 	bl	8001a68 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource (&htim4, &sClockSourceConfig) != HAL_OK)
 800173e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001742:	4619      	mov	r1, r3
 8001744:	4821      	ldr	r0, [pc, #132]	; (80017cc <MX_TIM4_Init+0xf8>)
 8001746:	f002 f837 	bl	80037b8 <HAL_TIM_ConfigClockSource>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM4_Init+0x80>
    {
        Error_Handler ();
 8001750:	f000 f98a 	bl	8001a68 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init (&htim4) != HAL_OK)
 8001754:	481d      	ldr	r0, [pc, #116]	; (80017cc <MX_TIM4_Init+0xf8>)
 8001756:	f001 fd6f 	bl	8003238 <HAL_TIM_PWM_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM4_Init+0x90>
    {
        Error_Handler ();
 8001760:	f000 f982 	bl	8001a68 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization (&htim4, &sMasterConfig)
 800176c:	f107 0320 	add.w	r3, r7, #32
 8001770:	4619      	mov	r1, r3
 8001772:	4816      	ldr	r0, [pc, #88]	; (80017cc <MX_TIM4_Init+0xf8>)
 8001774:	f002 fba0 	bl	8003eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM4_Init+0xae>
            != HAL_OK)
    {
        Error_Handler ();
 800177e:	f000 f973 	bl	8001a68 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001782:	2360      	movs	r3, #96	; 0x60
 8001784:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel (&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2208      	movs	r2, #8
 8001796:	4619      	mov	r1, r3
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <MX_TIM4_Init+0xf8>)
 800179a:	f001 ff4f 	bl	800363c <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM4_Init+0xd4>
    {
        Error_Handler ();
 80017a4:	f000 f960 	bl	8001a68 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel (&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	220c      	movs	r2, #12
 80017ac:	4619      	mov	r1, r3
 80017ae:	4807      	ldr	r0, [pc, #28]	; (80017cc <MX_TIM4_Init+0xf8>)
 80017b0:	f001 ff44 	bl	800363c <HAL_TIM_PWM_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM4_Init+0xea>
    {
        Error_Handler ();
 80017ba:	f000 f955 	bl	8001a68 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
    HAL_TIM_MspPostInit (&htim4);
 80017be:	4803      	ldr	r0, [pc, #12]	; (80017cc <MX_TIM4_Init+0xf8>)
 80017c0:	f000 f9c4 	bl	8001b4c <HAL_TIM_MspPostInit>

}
 80017c4:	bf00      	nop
 80017c6:	3738      	adds	r7, #56	; 0x38
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200000b8 	.word	0x200000b8
 80017d0:	40000800 	.word	0x40000800

080017d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config (void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b090      	sub	sp, #64	; 0x40
 80017d8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	2228      	movs	r2, #40	; 0x28
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 f82c 	bl	8004840 <memset>
        { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]
        { 0 };

    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f6:	2301      	movs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017fe:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001804:	2301      	movs	r3, #1
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001808:	2302      	movs	r3, #2
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800180c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001810:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001812:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8001818:	f107 0318 	add.w	r3, r7, #24
 800181c:	4618      	mov	r0, r3
 800181e:	f001 f84d 	bl	80028bc <HAL_RCC_OscConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <SystemClock_Config+0x58>
    {
        Error_Handler ();
 8001828:	f000 f91e 	bl	8001a68 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800182c:	230f      	movs	r3, #15
 800182e:	607b      	str	r3, [r7, #4]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001830:	2302      	movs	r3, #2
 8001832:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2102      	movs	r1, #2
 8001846:	4618      	mov	r0, r3
 8001848:	f001 fab8 	bl	8002dbc <HAL_RCC_ClockConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <SystemClock_Config+0x82>
    {
        Error_Handler ();
 8001852:	f000 f909 	bl	8001a68 <Error_Handler>
    }
}
 8001856:	bf00      	nop
 8001858:	3740      	adds	r7, #64	; 0x40
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init (void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig =
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
        { 0 };
    TIM_MasterConfigTypeDef sMasterConfig =
 8001874:	463b      	mov	r3, r7
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
        { 0 };

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <MX_TIM3_Init+0x94>)
 800187e:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <MX_TIM3_Init+0x98>)
 8001880:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 7199;
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <MX_TIM3_Init+0x94>)
 8001884:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001888:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_TIM3_Init+0x94>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 49;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <MX_TIM3_Init+0x94>)
 8001892:	2231      	movs	r2, #49	; 0x31
 8001894:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_TIM3_Init+0x94>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_TIM3_Init+0x94>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init (&htim3) != HAL_OK)
 80018a2:	4814      	ldr	r0, [pc, #80]	; (80018f4 <MX_TIM3_Init+0x94>)
 80018a4:	f001 fc26 	bl	80030f4 <HAL_TIM_Base_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM3_Init+0x52>
    {
        Error_Handler ();
 80018ae:	f000 f8db 	bl	8001a68 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b6:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource (&htim3, &sClockSourceConfig) != HAL_OK)
 80018b8:	f107 0308 	add.w	r3, r7, #8
 80018bc:	4619      	mov	r1, r3
 80018be:	480d      	ldr	r0, [pc, #52]	; (80018f4 <MX_TIM3_Init+0x94>)
 80018c0:	f001 ff7a 	bl	80037b8 <HAL_TIM_ConfigClockSource>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM3_Init+0x6e>
    {
        Error_Handler ();
 80018ca:	f000 f8cd 	bl	8001a68 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization (&htim3, &sMasterConfig)
 80018d6:	463b      	mov	r3, r7
 80018d8:	4619      	mov	r1, r3
 80018da:	4806      	ldr	r0, [pc, #24]	; (80018f4 <MX_TIM3_Init+0x94>)
 80018dc:	f002 faec 	bl	8003eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM3_Init+0x8a>
            != HAL_OK)
    {
        Error_Handler ();
 80018e6:	f000 f8bf 	bl	8001a68 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000104 	.word	0x20000104
 80018f8:	40000400 	.word	0x40000400

080018fc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init (void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_USART1_UART_Init+0x4c>)
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <MX_USART1_UART_Init+0x50>)
 8001904:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <MX_USART1_UART_Init+0x4c>)
 8001908:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800190c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_USART1_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_USART1_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_USART1_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_USART1_UART_Init+0x4c>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_USART1_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_USART1_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init (&huart1) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_USART1_UART_Init+0x4c>)
 8001934:	f002 fb30 	bl	8003f98 <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler ();
 800193e:	f000 f893 	bl	8001a68 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200001d4 	.word	0x200001d4
 800194c:	40013800 	.word	0x40013800

08001950 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init (void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_DMA_Init+0x48>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <MX_DMA_Init+0x48>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6153      	str	r3, [r2, #20]
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <MX_DMA_Init+0x48>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel4_IRQn interrupt configuration */
    HAL_NVIC_SetPriority (DMA1_Channel4_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	200e      	movs	r0, #14
 8001974:	f000 fb7d 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ (DMA1_Channel4_IRQn);
 8001978:	200e      	movs	r0, #14
 800197a:	f000 fb96 	bl	80020aa <HAL_NVIC_EnableIRQ>
    /* DMA1_Channel5_IRQn interrupt configuration */
    HAL_NVIC_SetPriority (DMA1_Channel5_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	200f      	movs	r0, #15
 8001984:	f000 fb75 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ (DMA1_Channel5_IRQn);
 8001988:	200f      	movs	r0, #15
 800198a:	f000 fb8e 	bl	80020aa <HAL_NVIC_EnableIRQ>

}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init (void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct =
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
        { 0 };

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <MX_GPIO_Init+0xc0>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <MX_GPIO_Init+0xc0>)
 80019b6:	f043 0320 	orr.w	r3, r3, #32
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <MX_GPIO_Init+0xc0>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <MX_GPIO_Init+0xc0>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a23      	ldr	r2, [pc, #140]	; (8001a5c <MX_GPIO_Init+0xc0>)
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <MX_GPIO_Init+0xc0>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <MX_GPIO_Init+0xc0>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a1d      	ldr	r2, [pc, #116]	; (8001a5c <MX_GPIO_Init+0xc0>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <MX_GPIO_Init+0xc0>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin (GPIOB,
 80019f8:	2200      	movs	r2, #0
 80019fa:	f640 4103 	movw	r1, #3075	; 0xc03
 80019fe:	4818      	ldr	r0, [pc, #96]	; (8001a60 <MX_GPIO_Init+0xc4>)
 8001a00:	f000 ff43 	bl	800288a <HAL_GPIO_WritePin>
    GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_RESET);

    /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_10 | GPIO_PIN_11;
 8001a04:	f640 4303 	movw	r3, #3075	; 0xc03
 8001a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4810      	ldr	r0, [pc, #64]	; (8001a60 <MX_GPIO_Init+0xc4>)
 8001a1e:	f000 fdc3 	bl	80025a8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA15 */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	4619      	mov	r1, r3
 8001a36:	480b      	ldr	r0, [pc, #44]	; (8001a64 <MX_GPIO_Init+0xc8>)
 8001a38:	f000 fdb6 	bl	80025a8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB3 PB4 PB5 */
    GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8001a3c:	2338      	movs	r3, #56	; 0x38
 8001a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4804      	ldr	r0, [pc, #16]	; (8001a60 <MX_GPIO_Init+0xc4>)
 8001a50:	f000 fdaa 	bl	80025a8 <HAL_GPIO_Init>

}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010c00 	.word	0x40010c00
 8001a64:	40010800 	.word	0x40010800

08001a68 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler (void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_MspInit+0x5c>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <HAL_MspInit+0x5c>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6193      	str	r3, [r2, #24]
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_MspInit+0x5c>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_MspInit+0x5c>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_MspInit+0x5c>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_MspInit+0x5c>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_MspInit+0x60>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_MspInit+0x60>)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010000 	.word	0x40010000

08001ad8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <HAL_TIM_Base_MspInit+0x68>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d114      	bne.n	8001b14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_TIM_Base_MspInit+0x6c>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <HAL_TIM_Base_MspInit+0x6c>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	61d3      	str	r3, [r2, #28]
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_TIM_Base_MspInit+0x6c>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	201d      	movs	r0, #29
 8001b08:	f000 fab3 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b0c:	201d      	movs	r0, #29
 8001b0e:	f000 facc 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b12:	e010      	b.n	8001b36 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HAL_TIM_Base_MspInit+0x70>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d10b      	bne.n	8001b36 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_TIM_Base_MspInit+0x6c>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <HAL_TIM_Base_MspInit+0x6c>)
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	61d3      	str	r3, [r2, #28]
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_TIM_Base_MspInit+0x6c>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40000400 	.word	0x40000400
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40000800 	.word	0x40000800

08001b4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_TIM_MspPostInit+0x5c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d118      	bne.n	8001b9e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <HAL_TIM_MspPostInit+0x60>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <HAL_TIM_MspPostInit+0x60>)
 8001b72:	f043 0308 	orr.w	r3, r3, #8
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_TIM_MspPostInit+0x60>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <HAL_TIM_MspPostInit+0x64>)
 8001b9a:	f000 fd05 	bl	80025a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40000800 	.word	0x40000800
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010c00 	.word	0x40010c00

08001bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a47      	ldr	r2, [pc, #284]	; (8001cec <HAL_UART_MspInit+0x138>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	f040 8086 	bne.w	8001ce2 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd6:	4b46      	ldr	r3, [pc, #280]	; (8001cf0 <HAL_UART_MspInit+0x13c>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	4a45      	ldr	r2, [pc, #276]	; (8001cf0 <HAL_UART_MspInit+0x13c>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6193      	str	r3, [r2, #24]
 8001be2:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <HAL_UART_MspInit+0x13c>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_UART_MspInit+0x13c>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	4a3f      	ldr	r2, [pc, #252]	; (8001cf0 <HAL_UART_MspInit+0x13c>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6193      	str	r3, [r2, #24]
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_UART_MspInit+0x13c>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4836      	ldr	r0, [pc, #216]	; (8001cf4 <HAL_UART_MspInit+0x140>)
 8001c1c:	f000 fcc4 	bl	80025a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 0310 	add.w	r3, r7, #16
 8001c32:	4619      	mov	r1, r3
 8001c34:	482f      	ldr	r0, [pc, #188]	; (8001cf4 <HAL_UART_MspInit+0x140>)
 8001c36:	f000 fcb7 	bl	80025a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001c3a:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <HAL_UART_MspInit+0x144>)
 8001c3c:	4a2f      	ldr	r2, [pc, #188]	; (8001cfc <HAL_UART_MspInit+0x148>)
 8001c3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c40:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <HAL_UART_MspInit+0x144>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c46:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <HAL_UART_MspInit+0x144>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c4c:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <HAL_UART_MspInit+0x144>)
 8001c4e:	2280      	movs	r2, #128	; 0x80
 8001c50:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_UART_MspInit+0x144>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c58:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <HAL_UART_MspInit+0x144>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c5e:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <HAL_UART_MspInit+0x144>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <HAL_UART_MspInit+0x144>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c6a:	4823      	ldr	r0, [pc, #140]	; (8001cf8 <HAL_UART_MspInit+0x144>)
 8001c6c:	f000 fa38 	bl	80020e0 <HAL_DMA_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001c76:	f7ff fef7 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_UART_MspInit+0x144>)
 8001c7e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c80:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <HAL_UART_MspInit+0x144>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <HAL_UART_MspInit+0x14c>)
 8001c88:	4a1e      	ldr	r2, [pc, #120]	; (8001d04 <HAL_UART_MspInit+0x150>)
 8001c8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_UART_MspInit+0x14c>)
 8001c8e:	2210      	movs	r2, #16
 8001c90:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_UART_MspInit+0x14c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_UART_MspInit+0x14c>)
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_UART_MspInit+0x14c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_UART_MspInit+0x14c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_UART_MspInit+0x14c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_UART_MspInit+0x14c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001cb6:	4812      	ldr	r0, [pc, #72]	; (8001d00 <HAL_UART_MspInit+0x14c>)
 8001cb8:	f000 fa12 	bl	80020e0 <HAL_DMA_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001cc2:	f7ff fed1 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	; (8001d00 <HAL_UART_MspInit+0x14c>)
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
 8001ccc:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <HAL_UART_MspInit+0x14c>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2025      	movs	r0, #37	; 0x25
 8001cd8:	f000 f9cb 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cdc:	2025      	movs	r0, #37	; 0x25
 8001cde:	f000 f9e4 	bl	80020aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40013800 	.word	0x40013800
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010800 	.word	0x40010800
 8001cf8:	20000190 	.word	0x20000190
 8001cfc:	40020058 	.word	0x40020058
 8001d00:	2000014c 	.word	0x2000014c
 8001d04:	40020044 	.word	0x40020044

08001d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <NMI_Handler+0x4>

08001d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <HardFault_Handler+0x4>

08001d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <MemManage_Handler+0x4>

08001d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <BusFault_Handler+0x4>

08001d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <UsageFault_Handler+0x4>

08001d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4e:	f000 f89d 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <DMA1_Channel4_IRQHandler+0x10>)
 8001d5e:	f000 faef 	bl	8002340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000014c 	.word	0x2000014c

08001d6c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <DMA1_Channel5_IRQHandler+0x10>)
 8001d72:	f000 fae5 	bl	8002340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000190 	.word	0x20000190

08001d80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <TIM3_IRQHandler+0x10>)
 8001d86:	f001 fb51 	bl	800342c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000104 	.word	0x20000104

08001d94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <USART1_IRQHandler+0x10>)
 8001d9a:	f002 f9cb 	bl	8004134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200001d4 	.word	0x200001d4

08001da8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001db4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001db6:	e003      	b.n	8001dc0 <LoopCopyDataInit>

08001db8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001dbc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dbe:	3104      	adds	r1, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001dc0:	480a      	ldr	r0, [pc, #40]	; (8001dec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001dc4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dc6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001dc8:	d3f6      	bcc.n	8001db8 <CopyDataInit>
  ldr r2, =_sbss
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001dcc:	e002      	b.n	8001dd4 <LoopFillZerobss>

08001dce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001dd0:	f842 3b04 	str.w	r3, [r2], #4

08001dd4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001dd6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001dd8:	d3f9      	bcc.n	8001dce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dda:	f7ff ffe5 	bl	8001da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f002 fd0b 	bl	80047f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de2:	f7ff fc4d 	bl	8001680 <main>
  bx lr
 8001de6:	4770      	bx	lr
  ldr r3, =_sidata
 8001de8:	0800489c 	.word	0x0800489c
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001df0:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001df4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001df8:	20000224 	.word	0x20000224

08001dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC1_2_IRQHandler>
	...

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_Init+0x28>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_Init+0x28>)
 8001e0a:	f043 0310 	orr.w	r3, r3, #16
 8001e0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 f923 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 f808 	bl	8001e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1c:	f7ff fe2a 	bl	8001a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40022000 	.word	0x40022000

08001e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_InitTick+0x54>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x58>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f93b 	bl	80020c6 <HAL_SYSTICK_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00e      	b.n	8001e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d80a      	bhi.n	8001e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f000 f903 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e6c:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <HAL_InitTick+0x5c>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	2000006c 	.word	0x2000006c
 8001e84:	20000074 	.word	0x20000074
 8001e88:	20000070 	.word	0x20000070

08001e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_IncTick+0x1c>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_IncTick+0x20>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a03      	ldr	r2, [pc, #12]	; (8001eac <HAL_IncTick+0x20>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	20000074 	.word	0x20000074
 8001eac:	20000220 	.word	0x20000220

08001eb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <HAL_GetTick+0x10>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000220 	.word	0x20000220

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4906      	ldr	r1, [pc, #24]	; (8001f5c <__NVIC_EnableIRQ+0x34>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff90 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff2d 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff42 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff90 	bl	8001fb4 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5f 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff35 	bl	8001f28 <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffa2 	bl	8002018 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e043      	b.n	800217e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_DMA_Init+0xa8>)
 80020fe:	4413      	add	r3, r2
 8002100:	4a22      	ldr	r2, [pc, #136]	; (800218c <HAL_DMA_Init+0xac>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	009a      	lsls	r2, r3, #2
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <HAL_DMA_Init+0xb0>)
 8002112:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800212a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800212e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	bffdfff8 	.word	0xbffdfff8
 800218c:	cccccccd 	.word	0xcccccccd
 8002190:	40020000 	.word	0x40020000

08002194 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_DMA_Start_IT+0x20>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e04a      	b.n	800224a <HAL_DMA_Start_IT+0xb6>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d13a      	bne.n	800223c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f9ae 	bl	800254c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 020e 	orr.w	r2, r2, #14
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e00f      	b.n	800222a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0204 	bic.w	r2, r2, #4
 8002218:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 020a 	orr.w	r2, r2, #10
 8002228:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e005      	b.n	8002248 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002244:	2302      	movs	r3, #2
 8002246:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002248:	7dfb      	ldrb	r3, [r7, #23]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002266:	2b02      	cmp	r3, #2
 8002268:	d005      	beq.n	8002276 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2204      	movs	r2, #4
 800226e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e051      	b.n	800231a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 020e 	bic.w	r2, r2, #14
 8002284:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0201 	bic.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a22      	ldr	r2, [pc, #136]	; (8002324 <HAL_DMA_Abort_IT+0xd0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d029      	beq.n	80022f4 <HAL_DMA_Abort_IT+0xa0>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a20      	ldr	r2, [pc, #128]	; (8002328 <HAL_DMA_Abort_IT+0xd4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d022      	beq.n	80022f0 <HAL_DMA_Abort_IT+0x9c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1f      	ldr	r2, [pc, #124]	; (800232c <HAL_DMA_Abort_IT+0xd8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d01a      	beq.n	80022ea <HAL_DMA_Abort_IT+0x96>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_DMA_Abort_IT+0xdc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d012      	beq.n	80022e4 <HAL_DMA_Abort_IT+0x90>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <HAL_DMA_Abort_IT+0xe0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00a      	beq.n	80022de <HAL_DMA_Abort_IT+0x8a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <HAL_DMA_Abort_IT+0xe4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d102      	bne.n	80022d8 <HAL_DMA_Abort_IT+0x84>
 80022d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022d6:	e00e      	b.n	80022f6 <HAL_DMA_Abort_IT+0xa2>
 80022d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022dc:	e00b      	b.n	80022f6 <HAL_DMA_Abort_IT+0xa2>
 80022de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e2:	e008      	b.n	80022f6 <HAL_DMA_Abort_IT+0xa2>
 80022e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e8:	e005      	b.n	80022f6 <HAL_DMA_Abort_IT+0xa2>
 80022ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ee:	e002      	b.n	80022f6 <HAL_DMA_Abort_IT+0xa2>
 80022f0:	2310      	movs	r3, #16
 80022f2:	e000      	b.n	80022f6 <HAL_DMA_Abort_IT+0xa2>
 80022f4:	2301      	movs	r3, #1
 80022f6:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_DMA_Abort_IT+0xe8>)
 80022f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	4798      	blx	r3
    } 
  }
  return status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40020008 	.word	0x40020008
 8002328:	4002001c 	.word	0x4002001c
 800232c:	40020030 	.word	0x40020030
 8002330:	40020044 	.word	0x40020044
 8002334:	40020058 	.word	0x40020058
 8002338:	4002006c 	.word	0x4002006c
 800233c:	40020000 	.word	0x40020000

08002340 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	2204      	movs	r2, #4
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d04f      	beq.n	8002408 <HAL_DMA_IRQHandler+0xc8>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d04a      	beq.n	8002408 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b00      	cmp	r3, #0
 800237e:	d107      	bne.n	8002390 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0204 	bic.w	r2, r2, #4
 800238e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a66      	ldr	r2, [pc, #408]	; (8002530 <HAL_DMA_IRQHandler+0x1f0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d029      	beq.n	80023ee <HAL_DMA_IRQHandler+0xae>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a65      	ldr	r2, [pc, #404]	; (8002534 <HAL_DMA_IRQHandler+0x1f4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d022      	beq.n	80023ea <HAL_DMA_IRQHandler+0xaa>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a63      	ldr	r2, [pc, #396]	; (8002538 <HAL_DMA_IRQHandler+0x1f8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d01a      	beq.n	80023e4 <HAL_DMA_IRQHandler+0xa4>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a62      	ldr	r2, [pc, #392]	; (800253c <HAL_DMA_IRQHandler+0x1fc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d012      	beq.n	80023de <HAL_DMA_IRQHandler+0x9e>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a60      	ldr	r2, [pc, #384]	; (8002540 <HAL_DMA_IRQHandler+0x200>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00a      	beq.n	80023d8 <HAL_DMA_IRQHandler+0x98>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5f      	ldr	r2, [pc, #380]	; (8002544 <HAL_DMA_IRQHandler+0x204>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d102      	bne.n	80023d2 <HAL_DMA_IRQHandler+0x92>
 80023cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023d0:	e00e      	b.n	80023f0 <HAL_DMA_IRQHandler+0xb0>
 80023d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80023d6:	e00b      	b.n	80023f0 <HAL_DMA_IRQHandler+0xb0>
 80023d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023dc:	e008      	b.n	80023f0 <HAL_DMA_IRQHandler+0xb0>
 80023de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023e2:	e005      	b.n	80023f0 <HAL_DMA_IRQHandler+0xb0>
 80023e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023e8:	e002      	b.n	80023f0 <HAL_DMA_IRQHandler+0xb0>
 80023ea:	2340      	movs	r3, #64	; 0x40
 80023ec:	e000      	b.n	80023f0 <HAL_DMA_IRQHandler+0xb0>
 80023ee:	2304      	movs	r3, #4
 80023f0:	4a55      	ldr	r2, [pc, #340]	; (8002548 <HAL_DMA_IRQHandler+0x208>)
 80023f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8094 	beq.w	8002526 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002406:	e08e      	b.n	8002526 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	2202      	movs	r2, #2
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d056      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x186>
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d051      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 020a 	bic.w	r2, r2, #10
 800243e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a38      	ldr	r2, [pc, #224]	; (8002530 <HAL_DMA_IRQHandler+0x1f0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d029      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x166>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a37      	ldr	r2, [pc, #220]	; (8002534 <HAL_DMA_IRQHandler+0x1f4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d022      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x162>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a35      	ldr	r2, [pc, #212]	; (8002538 <HAL_DMA_IRQHandler+0x1f8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01a      	beq.n	800249c <HAL_DMA_IRQHandler+0x15c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a34      	ldr	r2, [pc, #208]	; (800253c <HAL_DMA_IRQHandler+0x1fc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d012      	beq.n	8002496 <HAL_DMA_IRQHandler+0x156>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a32      	ldr	r2, [pc, #200]	; (8002540 <HAL_DMA_IRQHandler+0x200>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00a      	beq.n	8002490 <HAL_DMA_IRQHandler+0x150>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a31      	ldr	r2, [pc, #196]	; (8002544 <HAL_DMA_IRQHandler+0x204>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d102      	bne.n	800248a <HAL_DMA_IRQHandler+0x14a>
 8002484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002488:	e00e      	b.n	80024a8 <HAL_DMA_IRQHandler+0x168>
 800248a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800248e:	e00b      	b.n	80024a8 <HAL_DMA_IRQHandler+0x168>
 8002490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002494:	e008      	b.n	80024a8 <HAL_DMA_IRQHandler+0x168>
 8002496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800249a:	e005      	b.n	80024a8 <HAL_DMA_IRQHandler+0x168>
 800249c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a0:	e002      	b.n	80024a8 <HAL_DMA_IRQHandler+0x168>
 80024a2:	2320      	movs	r3, #32
 80024a4:	e000      	b.n	80024a8 <HAL_DMA_IRQHandler+0x168>
 80024a6:	2302      	movs	r3, #2
 80024a8:	4a27      	ldr	r2, [pc, #156]	; (8002548 <HAL_DMA_IRQHandler+0x208>)
 80024aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d034      	beq.n	8002526 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80024c4:	e02f      	b.n	8002526 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2208      	movs	r2, #8
 80024cc:	409a      	lsls	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d028      	beq.n	8002528 <HAL_DMA_IRQHandler+0x1e8>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d023      	beq.n	8002528 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 020e 	bic.w	r2, r2, #14
 80024ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f202 	lsl.w	r2, r1, r2
 80024fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	4798      	blx	r3
    }
  }
  return;
 8002526:	bf00      	nop
 8002528:	bf00      	nop
}
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40020008 	.word	0x40020008
 8002534:	4002001c 	.word	0x4002001c
 8002538:	40020030 	.word	0x40020030
 800253c:	40020044 	.word	0x40020044
 8002540:	40020058 	.word	0x40020058
 8002544:	4002006c 	.word	0x4002006c
 8002548:	40020000 	.word	0x40020000

0800254c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f202 	lsl.w	r2, r1, r2
 8002568:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b10      	cmp	r3, #16
 8002578:	d108      	bne.n	800258c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800258a:	e007      	b.n	800259c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	60da      	str	r2, [r3, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b08b      	sub	sp, #44	; 0x2c
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025b6:	2300      	movs	r3, #0
 80025b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ba:	e127      	b.n	800280c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025bc:	2201      	movs	r2, #1
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	f040 8116 	bne.w	8002806 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b12      	cmp	r3, #18
 80025e0:	d034      	beq.n	800264c <HAL_GPIO_Init+0xa4>
 80025e2:	2b12      	cmp	r3, #18
 80025e4:	d80d      	bhi.n	8002602 <HAL_GPIO_Init+0x5a>
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d02b      	beq.n	8002642 <HAL_GPIO_Init+0x9a>
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d804      	bhi.n	80025f8 <HAL_GPIO_Init+0x50>
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d031      	beq.n	8002656 <HAL_GPIO_Init+0xae>
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d01c      	beq.n	8002630 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025f6:	e048      	b.n	800268a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d043      	beq.n	8002684 <HAL_GPIO_Init+0xdc>
 80025fc:	2b11      	cmp	r3, #17
 80025fe:	d01b      	beq.n	8002638 <HAL_GPIO_Init+0x90>
          break;
 8002600:	e043      	b.n	800268a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002602:	4a89      	ldr	r2, [pc, #548]	; (8002828 <HAL_GPIO_Init+0x280>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d026      	beq.n	8002656 <HAL_GPIO_Init+0xae>
 8002608:	4a87      	ldr	r2, [pc, #540]	; (8002828 <HAL_GPIO_Init+0x280>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d806      	bhi.n	800261c <HAL_GPIO_Init+0x74>
 800260e:	4a87      	ldr	r2, [pc, #540]	; (800282c <HAL_GPIO_Init+0x284>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d020      	beq.n	8002656 <HAL_GPIO_Init+0xae>
 8002614:	4a86      	ldr	r2, [pc, #536]	; (8002830 <HAL_GPIO_Init+0x288>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01d      	beq.n	8002656 <HAL_GPIO_Init+0xae>
          break;
 800261a:	e036      	b.n	800268a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800261c:	4a85      	ldr	r2, [pc, #532]	; (8002834 <HAL_GPIO_Init+0x28c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d019      	beq.n	8002656 <HAL_GPIO_Init+0xae>
 8002622:	4a85      	ldr	r2, [pc, #532]	; (8002838 <HAL_GPIO_Init+0x290>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d016      	beq.n	8002656 <HAL_GPIO_Init+0xae>
 8002628:	4a84      	ldr	r2, [pc, #528]	; (800283c <HAL_GPIO_Init+0x294>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0xae>
          break;
 800262e:	e02c      	b.n	800268a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	623b      	str	r3, [r7, #32]
          break;
 8002636:	e028      	b.n	800268a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	3304      	adds	r3, #4
 800263e:	623b      	str	r3, [r7, #32]
          break;
 8002640:	e023      	b.n	800268a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	3308      	adds	r3, #8
 8002648:	623b      	str	r3, [r7, #32]
          break;
 800264a:	e01e      	b.n	800268a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	330c      	adds	r3, #12
 8002652:	623b      	str	r3, [r7, #32]
          break;
 8002654:	e019      	b.n	800268a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800265e:	2304      	movs	r3, #4
 8002660:	623b      	str	r3, [r7, #32]
          break;
 8002662:	e012      	b.n	800268a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800266c:	2308      	movs	r3, #8
 800266e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	611a      	str	r2, [r3, #16]
          break;
 8002676:	e008      	b.n	800268a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002678:	2308      	movs	r3, #8
 800267a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	615a      	str	r2, [r3, #20]
          break;
 8002682:	e002      	b.n	800268a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002684:	2300      	movs	r3, #0
 8002686:	623b      	str	r3, [r7, #32]
          break;
 8002688:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2bff      	cmp	r3, #255	; 0xff
 800268e:	d801      	bhi.n	8002694 <HAL_GPIO_Init+0xec>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	e001      	b.n	8002698 <HAL_GPIO_Init+0xf0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3304      	adds	r3, #4
 8002698:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2bff      	cmp	r3, #255	; 0xff
 800269e:	d802      	bhi.n	80026a6 <HAL_GPIO_Init+0xfe>
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	e002      	b.n	80026ac <HAL_GPIO_Init+0x104>
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	3b08      	subs	r3, #8
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	210f      	movs	r1, #15
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43db      	mvns	r3, r3
 80026bc:	401a      	ands	r2, r3
 80026be:	6a39      	ldr	r1, [r7, #32]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	431a      	orrs	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8096 	beq.w	8002806 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026da:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_GPIO_Init+0x298>)
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	4a58      	ldr	r2, [pc, #352]	; (8002840 <HAL_GPIO_Init+0x298>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6193      	str	r3, [r2, #24]
 80026e6:	4b56      	ldr	r3, [pc, #344]	; (8002840 <HAL_GPIO_Init+0x298>)
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026f2:	4a54      	ldr	r2, [pc, #336]	; (8002844 <HAL_GPIO_Init+0x29c>)
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4013      	ands	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4b      	ldr	r2, [pc, #300]	; (8002848 <HAL_GPIO_Init+0x2a0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_GPIO_Init+0x19e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4a      	ldr	r2, [pc, #296]	; (800284c <HAL_GPIO_Init+0x2a4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00d      	beq.n	8002742 <HAL_GPIO_Init+0x19a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a49      	ldr	r2, [pc, #292]	; (8002850 <HAL_GPIO_Init+0x2a8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d007      	beq.n	800273e <HAL_GPIO_Init+0x196>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a48      	ldr	r2, [pc, #288]	; (8002854 <HAL_GPIO_Init+0x2ac>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d101      	bne.n	800273a <HAL_GPIO_Init+0x192>
 8002736:	2303      	movs	r3, #3
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x1a0>
 800273a:	2304      	movs	r3, #4
 800273c:	e004      	b.n	8002748 <HAL_GPIO_Init+0x1a0>
 800273e:	2302      	movs	r3, #2
 8002740:	e002      	b.n	8002748 <HAL_GPIO_Init+0x1a0>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x1a0>
 8002746:	2300      	movs	r3, #0
 8002748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274a:	f002 0203 	and.w	r2, r2, #3
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	4093      	lsls	r3, r2
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002758:	493a      	ldr	r1, [pc, #232]	; (8002844 <HAL_GPIO_Init+0x29c>)
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d006      	beq.n	8002780 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002772:	4b39      	ldr	r3, [pc, #228]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4938      	ldr	r1, [pc, #224]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
 800277e:	e006      	b.n	800278e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002780:	4b35      	ldr	r3, [pc, #212]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	43db      	mvns	r3, r3
 8002788:	4933      	ldr	r1, [pc, #204]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 800278a:	4013      	ands	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800279a:	4b2f      	ldr	r3, [pc, #188]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	492e      	ldr	r1, [pc, #184]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
 80027a6:	e006      	b.n	80027b6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027a8:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	4929      	ldr	r1, [pc, #164]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d006      	beq.n	80027d0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027c2:	4b25      	ldr	r3, [pc, #148]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	4924      	ldr	r1, [pc, #144]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
 80027ce:	e006      	b.n	80027de <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	491f      	ldr	r1, [pc, #124]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 80027da:	4013      	ands	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	491a      	ldr	r1, [pc, #104]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60cb      	str	r3, [r1, #12]
 80027f6:	e006      	b.n	8002806 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027f8:	4b17      	ldr	r3, [pc, #92]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	43db      	mvns	r3, r3
 8002800:	4915      	ldr	r1, [pc, #84]	; (8002858 <HAL_GPIO_Init+0x2b0>)
 8002802:	4013      	ands	r3, r2
 8002804:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	3301      	adds	r3, #1
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	f47f aed0 	bne.w	80025bc <HAL_GPIO_Init+0x14>
  }
}
 800281c:	bf00      	nop
 800281e:	372c      	adds	r7, #44	; 0x2c
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	10210000 	.word	0x10210000
 800282c:	10110000 	.word	0x10110000
 8002830:	10120000 	.word	0x10120000
 8002834:	10310000 	.word	0x10310000
 8002838:	10320000 	.word	0x10320000
 800283c:	10220000 	.word	0x10220000
 8002840:	40021000 	.word	0x40021000
 8002844:	40010000 	.word	0x40010000
 8002848:	40010800 	.word	0x40010800
 800284c:	40010c00 	.word	0x40010c00
 8002850:	40011000 	.word	0x40011000
 8002854:	40011400 	.word	0x40011400
 8002858:	40010400 	.word	0x40010400

0800285c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
 8002878:	e001      	b.n	800287e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	807b      	strh	r3, [r7, #2]
 8002896:	4613      	mov	r3, r2
 8002898:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800289a:	787b      	ldrb	r3, [r7, #1]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a0:	887a      	ldrh	r2, [r7, #2]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028a6:	e003      	b.n	80028b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028a8:	887b      	ldrh	r3, [r7, #2]
 80028aa:	041a      	lsls	r2, r3, #16
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	611a      	str	r2, [r3, #16]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e26c      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8087 	beq.w	80029ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028dc:	4b92      	ldr	r3, [pc, #584]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d00c      	beq.n	8002902 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028e8:	4b8f      	ldr	r3, [pc, #572]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d112      	bne.n	800291a <HAL_RCC_OscConfig+0x5e>
 80028f4:	4b8c      	ldr	r3, [pc, #560]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002900:	d10b      	bne.n	800291a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002902:	4b89      	ldr	r3, [pc, #548]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d06c      	beq.n	80029e8 <HAL_RCC_OscConfig+0x12c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d168      	bne.n	80029e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e246      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x76>
 8002924:	4b80      	ldr	r3, [pc, #512]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a7f      	ldr	r2, [pc, #508]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800292a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	e02e      	b.n	8002990 <HAL_RCC_OscConfig+0xd4>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x98>
 800293a:	4b7b      	ldr	r3, [pc, #492]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a7a      	ldr	r2, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b78      	ldr	r3, [pc, #480]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a77      	ldr	r2, [pc, #476]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800294c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e01d      	b.n	8002990 <HAL_RCC_OscConfig+0xd4>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0xbc>
 800295e:	4b72      	ldr	r3, [pc, #456]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a71      	ldr	r2, [pc, #452]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4b6f      	ldr	r3, [pc, #444]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a6e      	ldr	r2, [pc, #440]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0xd4>
 8002978:	4b6b      	ldr	r3, [pc, #428]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a6a      	ldr	r2, [pc, #424]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800297e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a67      	ldr	r2, [pc, #412]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 800298a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7ff fa8a 	bl	8001eb0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7ff fa86 	bl	8001eb0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1fa      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b5d      	ldr	r3, [pc, #372]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0xe4>
 80029be:	e014      	b.n	80029ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff fa76 	bl	8001eb0 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff fa72 	bl	8001eb0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1e6      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	4b53      	ldr	r3, [pc, #332]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x10c>
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d063      	beq.n	8002abe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029f6:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a02:	4b49      	ldr	r3, [pc, #292]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d11c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x18c>
 8002a0e:	4b46      	ldr	r3, [pc, #280]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d116      	bne.n	8002a48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_RCC_OscConfig+0x176>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e1ba      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4939      	ldr	r1, [pc, #228]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a46:	e03a      	b.n	8002abe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d020      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a50:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <HAL_RCC_OscConfig+0x270>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7ff fa2b 	bl	8001eb0 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5e:	f7ff fa27 	bl	8001eb0 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e19b      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7c:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4927      	ldr	r1, [pc, #156]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]
 8002a90:	e015      	b.n	8002abe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a92:	4b26      	ldr	r3, [pc, #152]	; (8002b2c <HAL_RCC_OscConfig+0x270>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff fa0a 	bl	8001eb0 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7ff fa06 	bl	8001eb0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e17a      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d03a      	beq.n	8002b40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d019      	beq.n	8002b06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad8:	f7ff f9ea 	bl	8001eb0 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae0:	f7ff f9e6 	bl	8001eb0 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e15a      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002afe:	2001      	movs	r0, #1
 8002b00:	f000 fada 	bl	80030b8 <RCC_Delay>
 8002b04:	e01c      	b.n	8002b40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_RCC_OscConfig+0x274>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7ff f9d0 	bl	8001eb0 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b12:	e00f      	b.n	8002b34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b14:	f7ff f9cc 	bl	8001eb0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d908      	bls.n	8002b34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e140      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	42420000 	.word	0x42420000
 8002b30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	4b9e      	ldr	r3, [pc, #632]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e9      	bne.n	8002b14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80a6 	beq.w	8002c9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b52:	4b97      	ldr	r3, [pc, #604]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10d      	bne.n	8002b7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	4b94      	ldr	r3, [pc, #592]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4a93      	ldr	r2, [pc, #588]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b68:	61d3      	str	r3, [r2, #28]
 8002b6a:	4b91      	ldr	r3, [pc, #580]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b76:	2301      	movs	r3, #1
 8002b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7a:	4b8e      	ldr	r3, [pc, #568]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d118      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b86:	4b8b      	ldr	r3, [pc, #556]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a8a      	ldr	r2, [pc, #552]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b92:	f7ff f98d 	bl	8001eb0 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9a:	f7ff f989 	bl	8001eb0 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b64      	cmp	r3, #100	; 0x64
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0fd      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bac:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <HAL_RCC_OscConfig+0x4f8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d106      	bne.n	8002bce <HAL_RCC_OscConfig+0x312>
 8002bc0:	4b7b      	ldr	r3, [pc, #492]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4a7a      	ldr	r2, [pc, #488]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6213      	str	r3, [r2, #32]
 8002bcc:	e02d      	b.n	8002c2a <HAL_RCC_OscConfig+0x36e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x334>
 8002bd6:	4b76      	ldr	r3, [pc, #472]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4a75      	ldr	r2, [pc, #468]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6213      	str	r3, [r2, #32]
 8002be2:	4b73      	ldr	r3, [pc, #460]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4a72      	ldr	r2, [pc, #456]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	f023 0304 	bic.w	r3, r3, #4
 8002bec:	6213      	str	r3, [r2, #32]
 8002bee:	e01c      	b.n	8002c2a <HAL_RCC_OscConfig+0x36e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d10c      	bne.n	8002c12 <HAL_RCC_OscConfig+0x356>
 8002bf8:	4b6d      	ldr	r3, [pc, #436]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a6c      	ldr	r2, [pc, #432]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	6213      	str	r3, [r2, #32]
 8002c04:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4a69      	ldr	r2, [pc, #420]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6213      	str	r3, [r2, #32]
 8002c10:	e00b      	b.n	8002c2a <HAL_RCC_OscConfig+0x36e>
 8002c12:	4b67      	ldr	r3, [pc, #412]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4a66      	ldr	r2, [pc, #408]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	6213      	str	r3, [r2, #32]
 8002c1e:	4b64      	ldr	r3, [pc, #400]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4a63      	ldr	r2, [pc, #396]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002c24:	f023 0304 	bic.w	r3, r3, #4
 8002c28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d015      	beq.n	8002c5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c32:	f7ff f93d 	bl	8001eb0 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7ff f939 	bl	8001eb0 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e0ab      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c50:	4b57      	ldr	r3, [pc, #348]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ee      	beq.n	8002c3a <HAL_RCC_OscConfig+0x37e>
 8002c5c:	e014      	b.n	8002c88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7ff f927 	bl	8001eb0 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7ff f923 	bl	8001eb0 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e095      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7c:	4b4c      	ldr	r3, [pc, #304]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ee      	bne.n	8002c66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d105      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8e:	4b48      	ldr	r3, [pc, #288]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	4a47      	ldr	r2, [pc, #284]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8081 	beq.w	8002da6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ca4:	4b42      	ldr	r3, [pc, #264]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d061      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d146      	bne.n	8002d46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb8:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <HAL_RCC_OscConfig+0x4fc>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7ff f8f7 	bl	8001eb0 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7ff f8f3 	bl	8001eb0 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e067      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd8:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d108      	bne.n	8002d00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cee:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	492d      	ldr	r1, [pc, #180]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d00:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a19      	ldr	r1, [r3, #32]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	430b      	orrs	r3, r1
 8002d12:	4927      	ldr	r1, [pc, #156]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d18:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <HAL_RCC_OscConfig+0x4fc>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7ff f8c7 	bl	8001eb0 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d26:	f7ff f8c3 	bl	8001eb0 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e037      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x46a>
 8002d44:	e02f      	b.n	8002da6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d46:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <HAL_RCC_OscConfig+0x4fc>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7ff f8b0 	bl	8001eb0 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d54:	f7ff f8ac 	bl	8001eb0 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e020      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d66:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x498>
 8002d72:	e018      	b.n	8002da6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e013      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_OscConfig+0x4f4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d106      	bne.n	8002da2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d001      	beq.n	8002da6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40007000 	.word	0x40007000
 8002db8:	42420060 	.word	0x42420060

08002dbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0d0      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <HAL_RCC_ClockConfig+0x1c0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d910      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b67      	ldr	r3, [pc, #412]	; (8002f7c <HAL_RCC_ClockConfig+0x1c0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 0207 	bic.w	r2, r3, #7
 8002de6:	4965      	ldr	r1, [pc, #404]	; (8002f7c <HAL_RCC_ClockConfig+0x1c0>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b63      	ldr	r3, [pc, #396]	; (8002f7c <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0b8      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e18:	4b59      	ldr	r3, [pc, #356]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4a58      	ldr	r2, [pc, #352]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e30:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4a52      	ldr	r2, [pc, #328]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3c:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	494d      	ldr	r1, [pc, #308]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d040      	beq.n	8002edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d115      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e07f      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d107      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e073      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06b      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e9a:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f023 0203 	bic.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4936      	ldr	r1, [pc, #216]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eac:	f7ff f800 	bl	8001eb0 <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb4:	f7fe fffc 	bl	8001eb0 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e053      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 020c 	and.w	r2, r3, #12
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d1eb      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002edc:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <HAL_RCC_ClockConfig+0x1c0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d210      	bcs.n	8002f0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 0207 	bic.w	r2, r3, #7
 8002ef2:	4922      	ldr	r1, [pc, #136]	; (8002f7c <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e032      	b.n	8002f72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f18:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4916      	ldr	r1, [pc, #88]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	490e      	ldr	r1, [pc, #56]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f4a:	f000 f821 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8002f4e:	4601      	mov	r1, r0
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5c:	5cd3      	ldrb	r3, [r2, r3]
 8002f5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f62:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <HAL_RCC_ClockConfig+0x1cc>)
 8002f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_RCC_ClockConfig+0x1d0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe ff5e 	bl	8001e2c <HAL_InitTick>

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40022000 	.word	0x40022000
 8002f80:	40021000 	.word	0x40021000
 8002f84:	0800487c 	.word	0x0800487c
 8002f88:	2000006c 	.word	0x2000006c
 8002f8c:	20000070 	.word	0x20000070

08002f90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	b490      	push	{r4, r7}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f96:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f98:	1d3c      	adds	r4, r7, #4
 8002f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fa0:	4b28      	ldr	r3, [pc, #160]	; (8003044 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fba:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d002      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x46>
 8002fce:	e02d      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fd2:	623b      	str	r3, [r7, #32]
      break;
 8002fd4:	e02d      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	0c9b      	lsrs	r3, r3, #18
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fe8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d013      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	0c5b      	lsrs	r3, r3, #17
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003002:	4413      	add	r3, r2
 8003004:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003008:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_RCC_GetSysClockFreq+0xbc>)
 800300e:	fb02 f203 	mul.w	r2, r2, r3
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
 800301a:	e004      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	623b      	str	r3, [r7, #32]
      break;
 800302a:	e002      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800302c:	4b07      	ldr	r3, [pc, #28]	; (800304c <HAL_RCC_GetSysClockFreq+0xbc>)
 800302e:	623b      	str	r3, [r7, #32]
      break;
 8003030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003032:	6a3b      	ldr	r3, [r7, #32]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3728      	adds	r7, #40	; 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bc90      	pop	{r4, r7}
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	08004868 	.word	0x08004868
 8003044:	08004878 	.word	0x08004878
 8003048:	40021000 	.word	0x40021000
 800304c:	007a1200 	.word	0x007a1200
 8003050:	003d0900 	.word	0x003d0900

08003054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <HAL_RCC_GetHCLKFreq+0x10>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	2000006c 	.word	0x2000006c

08003068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800306c:	f7ff fff2 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8003070:	4601      	mov	r1, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4a03      	ldr	r2, [pc, #12]	; (800308c <HAL_RCC_GetPCLK1Freq+0x24>)
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	0800488c 	.word	0x0800488c

08003090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003094:	f7ff ffde 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8003098:	4601      	mov	r1, r0
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	0adb      	lsrs	r3, r3, #11
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	4a03      	ldr	r2, [pc, #12]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a6:	5cd3      	ldrb	r3, [r2, r3]
 80030a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	0800488c 	.word	0x0800488c

080030b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030c0:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <RCC_Delay+0x34>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <RCC_Delay+0x38>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	0a5b      	lsrs	r3, r3, #9
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
 80030d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030d4:	bf00      	nop
  }
  while (Delay --);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1e5a      	subs	r2, r3, #1
 80030da:	60fa      	str	r2, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f9      	bne.n	80030d4 <RCC_Delay+0x1c>
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	2000006c 	.word	0x2000006c
 80030f0:	10624dd3 	.word	0x10624dd3

080030f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e041      	b.n	800318a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe fcdc 	bl	8001ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f000 fc1c 	bl	8003970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d001      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e03a      	b.n	8003222 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a18      	ldr	r2, [pc, #96]	; (800322c <HAL_TIM_Base_Start_IT+0x98>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00e      	beq.n	80031ec <HAL_TIM_Base_Start_IT+0x58>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d6:	d009      	beq.n	80031ec <HAL_TIM_Base_Start_IT+0x58>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a14      	ldr	r2, [pc, #80]	; (8003230 <HAL_TIM_Base_Start_IT+0x9c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_TIM_Base_Start_IT+0x58>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a13      	ldr	r2, [pc, #76]	; (8003234 <HAL_TIM_Base_Start_IT+0xa0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d111      	bne.n	8003210 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d010      	beq.n	8003220 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320e:	e007      	b.n	8003220 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800

08003238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e041      	b.n	80032ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f839 	bl	80032d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f000 fb7a 	bl	8003970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d109      	bne.n	800330c <HAL_TIM_PWM_Start+0x24>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e022      	b.n	8003352 <HAL_TIM_PWM_Start+0x6a>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2b04      	cmp	r3, #4
 8003310:	d109      	bne.n	8003326 <HAL_TIM_PWM_Start+0x3e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b01      	cmp	r3, #1
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e015      	b.n	8003352 <HAL_TIM_PWM_Start+0x6a>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b08      	cmp	r3, #8
 800332a:	d109      	bne.n	8003340 <HAL_TIM_PWM_Start+0x58>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	bf14      	ite	ne
 8003338:	2301      	movne	r3, #1
 800333a:	2300      	moveq	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e008      	b.n	8003352 <HAL_TIM_PWM_Start+0x6a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	bf14      	ite	ne
 800334c:	2301      	movne	r3, #1
 800334e:	2300      	moveq	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e05e      	b.n	8003418 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <HAL_TIM_PWM_Start+0x82>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003368:	e013      	b.n	8003392 <HAL_TIM_PWM_Start+0xaa>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d104      	bne.n	800337a <HAL_TIM_PWM_Start+0x92>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003378:	e00b      	b.n	8003392 <HAL_TIM_PWM_Start+0xaa>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d104      	bne.n	800338a <HAL_TIM_PWM_Start+0xa2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003388:	e003      	b.n	8003392 <HAL_TIM_PWM_Start+0xaa>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2201      	movs	r2, #1
 8003398:	6839      	ldr	r1, [r7, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fd68 	bl	8003e70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <HAL_TIM_PWM_Start+0x138>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d107      	bne.n	80033ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_TIM_PWM_Start+0x138>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_TIM_PWM_Start+0xfa>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033cc:	d009      	beq.n	80033e2 <HAL_TIM_PWM_Start+0xfa>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a14      	ldr	r2, [pc, #80]	; (8003424 <HAL_TIM_PWM_Start+0x13c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_TIM_PWM_Start+0xfa>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a12      	ldr	r2, [pc, #72]	; (8003428 <HAL_TIM_PWM_Start+0x140>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d111      	bne.n	8003406 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b06      	cmp	r3, #6
 80033f2:	d010      	beq.n	8003416 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003404:	e007      	b.n	8003416 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40000400 	.word	0x40000400
 8003428:	40000800 	.word	0x40000800

0800342c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d122      	bne.n	8003488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b02      	cmp	r3, #2
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0202 	mvn.w	r2, #2
 8003458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fa62 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa55 	bl	8003926 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fa64 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b04      	cmp	r3, #4
 8003494:	d122      	bne.n	80034dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d11b      	bne.n	80034dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0204 	mvn.w	r2, #4
 80034ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa38 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 80034c8:	e005      	b.n	80034d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fa2b 	bl	8003926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fa3a 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d122      	bne.n	8003530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d11b      	bne.n	8003530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0208 	mvn.w	r2, #8
 8003500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2204      	movs	r2, #4
 8003506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fa0e 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 800351c:	e005      	b.n	800352a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa01 	bl	8003926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fa10 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b10      	cmp	r3, #16
 800353c:	d122      	bne.n	8003584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b10      	cmp	r3, #16
 800354a:	d11b      	bne.n	8003584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0210 	mvn.w	r2, #16
 8003554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2208      	movs	r2, #8
 800355a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f9e4 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f9d7 	bl	8003926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f9e6 	bl	800394a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d10e      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b01      	cmp	r3, #1
 800359e:	d107      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0201 	mvn.w	r2, #1
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fd fdd0 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fcd5 	bl	8003f86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d10e      	bne.n	8003608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d107      	bne.n	8003608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f9aa 	bl	800395c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b20      	cmp	r3, #32
 8003614:	d10e      	bne.n	8003634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b20      	cmp	r3, #32
 8003622:	d107      	bne.n	8003634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0220 	mvn.w	r2, #32
 800362c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fca0 	bl	8003f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003652:	2302      	movs	r3, #2
 8003654:	e0ac      	b.n	80037b0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	f200 809f 	bhi.w	80037a4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003666:	a201      	add	r2, pc, #4	; (adr r2, 800366c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	080036a1 	.word	0x080036a1
 8003670:	080037a5 	.word	0x080037a5
 8003674:	080037a5 	.word	0x080037a5
 8003678:	080037a5 	.word	0x080037a5
 800367c:	080036e1 	.word	0x080036e1
 8003680:	080037a5 	.word	0x080037a5
 8003684:	080037a5 	.word	0x080037a5
 8003688:	080037a5 	.word	0x080037a5
 800368c:	08003723 	.word	0x08003723
 8003690:	080037a5 	.word	0x080037a5
 8003694:	080037a5 	.word	0x080037a5
 8003698:	080037a5 	.word	0x080037a5
 800369c:	08003763 	.word	0x08003763
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f9c4 	bl	8003a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0208 	orr.w	r2, r2, #8
 80036ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6999      	ldr	r1, [r3, #24]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	619a      	str	r2, [r3, #24]
      break;
 80036de:	e062      	b.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 fa0a 	bl	8003b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6999      	ldr	r1, [r3, #24]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	021a      	lsls	r2, r3, #8
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	619a      	str	r2, [r3, #24]
      break;
 8003720:	e041      	b.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fa53 	bl	8003bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0208 	orr.w	r2, r2, #8
 800373c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0204 	bic.w	r2, r2, #4
 800374c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69d9      	ldr	r1, [r3, #28]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	61da      	str	r2, [r3, #28]
      break;
 8003760:	e021      	b.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fa9d 	bl	8003ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69d9      	ldr	r1, [r3, #28]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	021a      	lsls	r2, r3, #8
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	61da      	str	r2, [r3, #28]
      break;
 80037a2:	e000      	b.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80037a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIM_ConfigClockSource+0x18>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e0a6      	b.n	800391e <HAL_TIM_ConfigClockSource+0x166>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d067      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0x120>
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	d80b      	bhi.n	8003824 <HAL_TIM_ConfigClockSource+0x6c>
 800380c:	2b10      	cmp	r3, #16
 800380e:	d073      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x140>
 8003810:	2b10      	cmp	r3, #16
 8003812:	d802      	bhi.n	800381a <HAL_TIM_ConfigClockSource+0x62>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d06f      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003818:	e078      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800381a:	2b20      	cmp	r3, #32
 800381c:	d06c      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x140>
 800381e:	2b30      	cmp	r3, #48	; 0x30
 8003820:	d06a      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003822:	e073      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003824:	2b70      	cmp	r3, #112	; 0x70
 8003826:	d00d      	beq.n	8003844 <HAL_TIM_ConfigClockSource+0x8c>
 8003828:	2b70      	cmp	r3, #112	; 0x70
 800382a:	d804      	bhi.n	8003836 <HAL_TIM_ConfigClockSource+0x7e>
 800382c:	2b50      	cmp	r3, #80	; 0x50
 800382e:	d033      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0xe0>
 8003830:	2b60      	cmp	r3, #96	; 0x60
 8003832:	d041      	beq.n	80038b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003834:	e06a      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383a:	d066      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x152>
 800383c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003840:	d017      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003842:	e063      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6899      	ldr	r1, [r3, #8]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f000 faed 	bl	8003e32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003866:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	609a      	str	r2, [r3, #8]
      break;
 8003870:	e04c      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6899      	ldr	r1, [r3, #8]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f000 fad6 	bl	8003e32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003894:	609a      	str	r2, [r3, #8]
      break;
 8003896:	e039      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f000 fa4d 	bl	8003d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2150      	movs	r1, #80	; 0x50
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 faa4 	bl	8003dfe <TIM_ITRx_SetConfig>
      break;
 80038b6:	e029      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	461a      	mov	r2, r3
 80038c6:	f000 fa6b 	bl	8003da0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2160      	movs	r1, #96	; 0x60
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fa94 	bl	8003dfe <TIM_ITRx_SetConfig>
      break;
 80038d6:	e019      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	461a      	mov	r2, r3
 80038e6:	f000 fa2d 	bl	8003d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fa84 	bl	8003dfe <TIM_ITRx_SetConfig>
      break;
 80038f6:	e009      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f000 fa7b 	bl	8003dfe <TIM_ITRx_SetConfig>
        break;
 8003908:	e000      	b.n	800390c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800390a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr
	...

08003970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a29      	ldr	r2, [pc, #164]	; (8003a28 <TIM_Base_SetConfig+0xb8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00b      	beq.n	80039a0 <TIM_Base_SetConfig+0x30>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398e:	d007      	beq.n	80039a0 <TIM_Base_SetConfig+0x30>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <TIM_Base_SetConfig+0xbc>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0x30>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a25      	ldr	r2, [pc, #148]	; (8003a30 <TIM_Base_SetConfig+0xc0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d108      	bne.n	80039b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <TIM_Base_SetConfig+0xb8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <TIM_Base_SetConfig+0x62>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d007      	beq.n	80039d2 <TIM_Base_SetConfig+0x62>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <TIM_Base_SetConfig+0xbc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_Base_SetConfig+0x62>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <TIM_Base_SetConfig+0xc0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d108      	bne.n	80039e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a07      	ldr	r2, [pc, #28]	; (8003a28 <TIM_Base_SetConfig+0xb8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d103      	bne.n	8003a18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	615a      	str	r2, [r3, #20]
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800

08003a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f023 0302 	bic.w	r3, r3, #2
 8003a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a1c      	ldr	r2, [pc, #112]	; (8003afc <TIM_OC1_SetConfig+0xc8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d10c      	bne.n	8003aaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 0308 	bic.w	r3, r3, #8
 8003a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f023 0304 	bic.w	r3, r3, #4
 8003aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a13      	ldr	r2, [pc, #76]	; (8003afc <TIM_OC1_SetConfig+0xc8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d111      	bne.n	8003ad6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	621a      	str	r2, [r3, #32]
}
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40012c00 	.word	0x40012c00

08003b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f023 0210 	bic.w	r2, r3, #16
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0320 	bic.w	r3, r3, #32
 8003b4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <TIM_OC2_SetConfig+0xd0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d10d      	bne.n	8003b7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <TIM_OC2_SetConfig+0xd0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d113      	bne.n	8003bac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	621a      	str	r2, [r3, #32]
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	40012c00 	.word	0x40012c00

08003bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0303 	bic.w	r3, r3, #3
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ca4 <TIM_OC3_SetConfig+0xd0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d10d      	bne.n	8003c4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a14      	ldr	r2, [pc, #80]	; (8003ca4 <TIM_OC3_SetConfig+0xd0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d113      	bne.n	8003c7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	621a      	str	r2, [r3, #32]
}
 8003c98:	bf00      	nop
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40012c00 	.word	0x40012c00

08003ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	031b      	lsls	r3, r3, #12
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a0f      	ldr	r2, [pc, #60]	; (8003d40 <TIM_OC4_SetConfig+0x98>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d109      	bne.n	8003d1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	019b      	lsls	r3, r3, #6
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	621a      	str	r2, [r3, #32]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	40012c00 	.word	0x40012c00

08003d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f023 0201 	bic.w	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f023 030a 	bic.w	r3, r3, #10
 8003d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f023 0210 	bic.w	r2, r3, #16
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	031b      	lsls	r3, r3, #12
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ddc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	621a      	str	r2, [r3, #32]
}
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr

08003dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f043 0307 	orr.w	r3, r3, #7
 8003e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr

08003e32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b087      	sub	sp, #28
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	021a      	lsls	r2, r3, #8
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	609a      	str	r2, [r3, #8]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	2201      	movs	r2, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a1a      	ldr	r2, [r3, #32]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	401a      	ands	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a1a      	ldr	r2, [r3, #32]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e046      	b.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00e      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1c:	d009      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d10c      	bne.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800

08003f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e03f      	b.n	800402a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd fdf8 	bl	8001bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	; 0x24
 8003fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fb7d 	bl	80046dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b20      	cmp	r3, #32
 800404c:	d166      	bne.n	800411c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_UART_Receive_DMA+0x26>
 8004054:	88fb      	ldrh	r3, [r7, #6]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e05f      	b.n	800411e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_UART_Receive_DMA+0x38>
 8004068:	2302      	movs	r3, #2
 800406a:	e058      	b.n	800411e <HAL_UART_Receive_DMA+0xea>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2222      	movs	r2, #34	; 0x22
 800408a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004092:	4a25      	ldr	r2, [pc, #148]	; (8004128 <HAL_UART_Receive_DMA+0xf4>)
 8004094:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409a:	4a24      	ldr	r2, [pc, #144]	; (800412c <HAL_UART_Receive_DMA+0xf8>)
 800409c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a2:	4a23      	ldr	r2, [pc, #140]	; (8004130 <HAL_UART_Receive_DMA+0xfc>)
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040aa:	2200      	movs	r2, #0
 80040ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80040ae:	f107 0308 	add.w	r3, r7, #8
 80040b2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3304      	adds	r3, #4
 80040be:	4619      	mov	r1, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	f7fe f865 	bl	8002194 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004116:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	0800436b 	.word	0x0800436b
 800412c:	080043d3 	.word	0x080043d3
 8004130:	080043ef 	.word	0x080043ef

08004134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004154:	2300      	movs	r3, #0
 8004156:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10d      	bne.n	8004186 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_UART_IRQHandler+0x52>
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fa2c 	bl	80045dc <UART_Receive_IT>
      return;
 8004184:	e0d1      	b.n	800432a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80b0 	beq.w	80042ee <HAL_UART_IRQHandler+0x1ba>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <HAL_UART_IRQHandler+0x70>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80a5 	beq.w	80042ee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_UART_IRQHandler+0x90>
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_UART_IRQHandler+0xb0>
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041dc:	f043 0202 	orr.w	r2, r3, #2
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_UART_IRQHandler+0xd0>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	f043 0204 	orr.w	r2, r3, #4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00f      	beq.n	800422e <HAL_UART_IRQHandler+0xfa>
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d104      	bne.n	8004222 <HAL_UART_IRQHandler+0xee>
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	f043 0208 	orr.w	r2, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d078      	beq.n	8004328 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <HAL_UART_IRQHandler+0x11c>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f9c6 	bl	80045dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	bf14      	ite	ne
 800425e:	2301      	movne	r3, #1
 8004260:	2300      	moveq	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <HAL_UART_IRQHandler+0x144>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d031      	beq.n	80042dc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f917 	bl	80044ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d023      	beq.n	80042d4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d013      	beq.n	80042cc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a8:	4a21      	ldr	r2, [pc, #132]	; (8004330 <HAL_UART_IRQHandler+0x1fc>)
 80042aa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fd ffcf 	bl	8002254 <HAL_DMA_Abort_IT>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d016      	beq.n	80042ea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042c6:	4610      	mov	r0, r2
 80042c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ca:	e00e      	b.n	80042ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f843 	bl	8004358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d2:	e00a      	b.n	80042ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f83f 	bl	8004358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042da:	e006      	b.n	80042ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f83b 	bl	8004358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80042e8:	e01e      	b.n	8004328 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ea:	bf00      	nop
    return;
 80042ec:	e01c      	b.n	8004328 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_UART_IRQHandler+0x1d6>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f903 	bl	800450e <UART_Transmit_IT>
    return;
 8004308:	e00f      	b.n	800432a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_UART_IRQHandler+0x1f6>
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f944 	bl	80045ac <UART_EndTransmit_IT>
    return;
 8004324:	bf00      	nop
 8004326:	e000      	b.n	800432a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004328:	bf00      	nop
  }
}
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	080044e7 	.word	0x080044e7

08004334 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr

08004346 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr

08004358 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr

0800436a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d11e      	bne.n	80043c4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800439a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ba:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f7fc ff69 	bl	800129c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f7ff ffb0 	bl	8004346 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	bf14      	ite	ne
 800440e:	2301      	movne	r3, #1
 8004410:	2300      	moveq	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b21      	cmp	r3, #33	; 0x21
 8004420:	d108      	bne.n	8004434 <UART_DMAError+0x46>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2200      	movs	r2, #0
 800442c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800442e:	68b8      	ldr	r0, [r7, #8]
 8004430:	f000 f827 	bl	8004482 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	bf14      	ite	ne
 8004442:	2301      	movne	r3, #1
 8004444:	2300      	moveq	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b22      	cmp	r3, #34	; 0x22
 8004454:	d108      	bne.n	8004468 <UART_DMAError+0x7a>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004462:	68b8      	ldr	r0, [r7, #8]
 8004464:	f000 f822 	bl	80044ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	f043 0210 	orr.w	r2, r3, #16
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004474:	68b8      	ldr	r0, [r7, #8]
 8004476:	f7ff ff6f 	bl	8004358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004498:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff ff29 	bl	8004358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b21      	cmp	r3, #33	; 0x21
 8004520:	d13e      	bne.n	80045a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452a:	d114      	bne.n	8004556 <UART_Transmit_IT+0x48>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d110      	bne.n	8004556 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004548:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	1c9a      	adds	r2, r3, #2
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	621a      	str	r2, [r3, #32]
 8004554:	e008      	b.n	8004568 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	1c59      	adds	r1, r3, #1
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6211      	str	r1, [r2, #32]
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29b      	uxth	r3, r3
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	4619      	mov	r1, r3
 8004576:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10f      	bne.n	800459c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800458a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	e000      	b.n	80045a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045a0:	2302      	movs	r3, #2
  }
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff feb1 	bl	8004334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b22      	cmp	r3, #34	; 0x22
 80045ee:	d170      	bne.n	80046d2 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f8:	d117      	bne.n	800462a <UART_Receive_IT+0x4e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d113      	bne.n	800462a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004618:	b29a      	uxth	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	1c9a      	adds	r2, r3, #2
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
 8004628:	e026      	b.n	8004678 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004630:	2300      	movs	r3, #0
 8004632:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463c:	d007      	beq.n	800464e <UART_Receive_IT+0x72>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <UART_Receive_IT+0x80>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	e008      	b.n	800466e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29b      	uxth	r3, r3
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4619      	mov	r1, r3
 8004686:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004688:	2b00      	cmp	r3, #0
 800468a:	d120      	bne.n	80046ce <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0220 	bic.w	r2, r2, #32
 800469a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fc fde9 	bl	800129c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e002      	b.n	80046d4 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e000      	b.n	80046d4 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
  }
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004716:	f023 030c 	bic.w	r3, r3, #12
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	430b      	orrs	r3, r1
 8004722:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2c      	ldr	r2, [pc, #176]	; (80047f0 <UART_SetConfig+0x114>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d103      	bne.n	800474c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004744:	f7fe fca4 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	e002      	b.n	8004752 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800474c:	f7fe fc8c 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8004750:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009a      	lsls	r2, r3, #2
 800475c:	441a      	add	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	4a22      	ldr	r2, [pc, #136]	; (80047f4 <UART_SetConfig+0x118>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	0119      	lsls	r1, r3, #4
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009a      	lsls	r2, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	fbb2 f2f3 	udiv	r2, r2, r3
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <UART_SetConfig+0x118>)
 800478a:	fba3 0302 	umull	r0, r3, r3, r2
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2064      	movs	r0, #100	; 0x64
 8004792:	fb00 f303 	mul.w	r3, r0, r3
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	3332      	adds	r3, #50	; 0x32
 800479c:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <UART_SetConfig+0x118>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a8:	4419      	add	r1, r3
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009a      	lsls	r2, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <UART_SetConfig+0x118>)
 80047c2:	fba3 0302 	umull	r0, r3, r3, r2
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	2064      	movs	r0, #100	; 0x64
 80047ca:	fb00 f303 	mul.w	r3, r0, r3
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	3332      	adds	r3, #50	; 0x32
 80047d4:	4a07      	ldr	r2, [pc, #28]	; (80047f4 <UART_SetConfig+0x118>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	f003 020f 	and.w	r2, r3, #15
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	440a      	add	r2, r1
 80047e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40013800 	.word	0x40013800
 80047f4:	51eb851f 	.word	0x51eb851f

080047f8 <__libc_init_array>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	2500      	movs	r5, #0
 80047fc:	4e0c      	ldr	r6, [pc, #48]	; (8004830 <__libc_init_array+0x38>)
 80047fe:	4c0d      	ldr	r4, [pc, #52]	; (8004834 <__libc_init_array+0x3c>)
 8004800:	1ba4      	subs	r4, r4, r6
 8004802:	10a4      	asrs	r4, r4, #2
 8004804:	42a5      	cmp	r5, r4
 8004806:	d109      	bne.n	800481c <__libc_init_array+0x24>
 8004808:	f000 f822 	bl	8004850 <_init>
 800480c:	2500      	movs	r5, #0
 800480e:	4e0a      	ldr	r6, [pc, #40]	; (8004838 <__libc_init_array+0x40>)
 8004810:	4c0a      	ldr	r4, [pc, #40]	; (800483c <__libc_init_array+0x44>)
 8004812:	1ba4      	subs	r4, r4, r6
 8004814:	10a4      	asrs	r4, r4, #2
 8004816:	42a5      	cmp	r5, r4
 8004818:	d105      	bne.n	8004826 <__libc_init_array+0x2e>
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004820:	4798      	blx	r3
 8004822:	3501      	adds	r5, #1
 8004824:	e7ee      	b.n	8004804 <__libc_init_array+0xc>
 8004826:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800482a:	4798      	blx	r3
 800482c:	3501      	adds	r5, #1
 800482e:	e7f2      	b.n	8004816 <__libc_init_array+0x1e>
 8004830:	08004894 	.word	0x08004894
 8004834:	08004894 	.word	0x08004894
 8004838:	08004894 	.word	0x08004894
 800483c:	08004898 	.word	0x08004898

08004840 <memset>:
 8004840:	4603      	mov	r3, r0
 8004842:	4402      	add	r2, r0
 8004844:	4293      	cmp	r3, r2
 8004846:	d100      	bne.n	800484a <memset+0xa>
 8004848:	4770      	bx	lr
 800484a:	f803 1b01 	strb.w	r1, [r3], #1
 800484e:	e7f9      	b.n	8004844 <memset+0x4>

08004850 <_init>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr

0800485c <_fini>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr
